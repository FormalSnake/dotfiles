This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
home/
  nabokikh/
    energy/
      default.nix
    nabokikh-mac/
      default.nix
    nabokikh-z13/
      default.nix
hosts/
  energy/
    default.nix
    hardware-configuration.nix
  nabokikh-mac/
    default.nix
  nabokikh-z13/
    default.nix
    hardware-configuration.nix
modules/
  home-manager/
    common/
      default.nix
    desktop/
      hyprland/
        default.nix
        hyprland.conf
      kde/
        default.nix
    misc/
      gtk/
        default.nix
      qt/
        default.nix
      wallpaper/
        default.nix
      xdg/
        default.nix
    programs/
      aerospace/
        default.nix
      alacritty/
        default.nix
      atuin/
        default.nix
      bat/
        default.nix
      bottom/
        default.nix
      brave/
        default.nix
      btop/
        default.nix
      fastfetch/
        default.nix
      fzf/
        default.nix
      git/
        default.nix
      go/
        default.nix
      gpg/
        default.nix
      k9s/
        default.nix
      krew/
        default.nix
      lazygit/
        default.nix
      neovim/
        lazyvim/
          lua/
            config/
              autocmds.lua
              keymaps.lua
              lazy.lua
              options.lua
            plugins/
              catppucin.lua
              helm-ls.lua
              lsp.lua
              mason.lua
              neo-tree.lua
              none-ls.lua
              tmux-navigator.lua
              treesitter.lua
          .luarc.json
          .neoconf.json
          init.lua
          stylua.toml
        default.nix
      obs-studio/
        default.nix
      saml2aws/
        default.nix
      starship/
        default.nix
      swappy/
        default.nix
      telegram/
        default.nix
      tmux/
        default.nix
      ulauncher/
        config/
          icons/
            icon.svg
          user-themes/
            Catppuccin-Macchiato-Lavender/
              manifest.json
              theme-gtk-3.20.css
              theme.css
          extensions.json
          settings.json
        default.nix
      wofi/
        default.nix
      zsh/
        default.nix
    scripts/
      bin/
        asg-getter
        asg-rotator
        cd-to-project
        fif
        fkill
        git-reset
        hyprshot
        konfig-updater
        ks
        ocr
        pull-all
        screen-recorder
        terra-clean
        traverser
        waybar-restart
      default.nix
    services/
      cliphist/
        default.nix
      easyeffects/
        default.nix
      flatpak/
        default.nix
      kanshi/
        default.nix
      swaync/
        default.nix
        style.css
      waybar/
        default.nix
  nixos/
    common/
      default.nix
    desktop/
      hyprland/
        default.nix
      kde/
        default.nix
    programs/
      steam/
        default.nix
    services/
      tlp/
        default.nix
overlays/
  default.nix
.gitignore
flake.lock
flake.nix
LICENSE
Makefile
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="hosts/energy/hardware-configuration.nix">
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = ["nvme" "xhci_pci" "ahci" "usb_storage" "usbhid" "sd_mod"];
  boot.initrd.kernelModules = [];

  fileSystems."/" = {
    device = "/dev/disk/by-label/NIXROOT";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-label/NIXBOOT";
    fsType = "vfat";
  };

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp6s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp7s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp5s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
</file>

<file path="hosts/nabokikh-z13/hardware-configuration.nix">
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = ["nvme" "xhci_pci" "thunderbolt" "usb_storage" "sd_mod"];
  boot.initrd.kernelModules = [];

  fileSystems."/" = {
    device = "/dev/disk/by-label/NIXROOT";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-label/NIXBOOT";
    fsType = "vfat";
  };

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp1s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
</file>

<file path="modules/home-manager/misc/wallpaper/default.nix">
{lib, ...}: {
  options.wallpaper = lib.mkOption {
    type = lib.types.path;
    default = ./wallpaper.jpg;
    readOnly = true;
    description = "Path to default wallpaper";
  };
}
</file>

<file path="modules/home-manager/programs/alacritty/default.nix">
{pkgs, ...}: {
  # Install alacritty via home-manager module
  programs.alacritty = {
    enable = true;
    settings = {
      general = {
        live_config_reload = true;
      };

      terminal = {
        shell.program = "zsh";
        shell.args = [
          "-l"
          "-c"
          "tmux attach || tmux "
        ];
      };

      env = {
        TERM = "xterm-256color";
      };

      window = {
        decorations =
          if pkgs.stdenv.isDarwin
          then "buttonless"
          else "none";
        dynamic_title = false;
        dynamic_padding = true;
        dimensions = {
          columns = 170;
          lines = 45;
        };
        padding = {
          x = 5;
          y = 1;
        };
      };

      scrolling = {
        history = 10000;
        multiplier = 3;
      };

      font = {
        size =
          if pkgs.stdenv.isDarwin
          then 15
          else 12;
        normal = {
          family = "MesloLGS Nerd Font";
          style = "Regular";
        };
        bold = {
          family = "MesloLGS Nerd Font";
          style = "Bold";
        };
        italic = {
          family = "MesloLGS Nerd Font";
          style = "Italic";
        };
        bold_italic = {
          family = "MesloLGS Nerd Font";
          style = "Italic";
        };
      };

      selection = {
        semantic_escape_chars = '',│`|:"' ()[]{}<>'';
        save_to_clipboard = true;
      };
    };
  };

  # Enable catppuccin theming for alacritty.
  catppuccin.alacritty.enable = true;
}
</file>

<file path="modules/home-manager/programs/atuin/default.nix">
{...}: {
  # Install atuin via home-manager module
  programs.atuin = {
    enable = true;
    settings = {
      inline_height = 25;
      invert = true;
      records = true;
      search_mode = "skim";
      secrets_filter = true;
      style = "compact";
    };
    flags = ["--disable-up-arrow"];
  };
}
</file>

<file path="modules/home-manager/programs/bat/default.nix">
{...}: {
  # Install bat via home-manager module
  programs.bat = {
    enable = true;
  };

  # Enable catppuccin theming for bat.
  catppuccin.bat.enable = true;
}
</file>

<file path="modules/home-manager/programs/bottom/default.nix">
{...}: {
  # Install bottom via home-manager module
  programs.bottom = {
    enable = true;
    settings = {
      flags = {
        avg_cpu = true;
        temperature_type = "c";
      };

      colors = {
        low_battery_color = "red";
      };
    };
  };
}
</file>

<file path="modules/home-manager/programs/btop/default.nix">
{...}: {
  # Install btop via home-manager module
  programs.btop = {
    enable = true;
    settings = {
      vim_keys = true;
    };
  };

  # Enable catppuccin theming for btop.
  catppuccin.btop.enable = true;
}
</file>

<file path="modules/home-manager/programs/fastfetch/default.nix">
{...}: {
  # Install and configure fastfetch via home-manager module
  programs.fastfetch = {
    enable = true;
    settings = {
      logo = {
        type = "none";
      };
      display = {
        separator = "->   ";
      };
      modules = [
        {
          type = "title";
          format = "{6}{7}{8}";
        }
        "break"
        {
          type = "custom";
          format = "┌───────────────────────────── System Information ─────────────────────────────┐";
        }
        "break"
        {
          key = "     OS           ";
          keyColor = "red";
          type = "os";
        }
        {
          key = "    󰌢 Machine      ";
          keyColor = "green";
          type = "host";
        }
        {
          key = "     Kernel       ";
          keyColor = "magenta";
          type = "kernel";
        }
        {
          key = "    󰏖 Packages     ";
          type = "packages";
        }
        {
          key = "    󰅐 Uptime       ";
          keyColor = "red";
          type = "uptime";
        }
        {
          key = "    󰍹 Resolution   ";
          keyColor = "yellow";
          type = "display";
          compactType = "original-with-refresh-rate";
        }
        {
          key = "     WM           ";
          keyColor = "blue";
          type = "wm";
        }
        {
          key = "     DE           ";
          keyColor = "green";
          type = "de";
        }
        {
          key = "     Shell        ";
          keyColor = "cyan";
          type = "shell";
        }
        {
          key = "     Terminal     ";
          keyColor = "red";
          type = "terminal";
        }
        {
          key = "    󰻠 CPU          ";
          keyColor = "yellow";
          type = "cpu";
        }
        {
          key = "    󰍛 GPU          ";
          keyColor = "blue";
          type = "gpu";
        }
        {
          key = "    󰑭 Memory       ";
          keyColor = "magenta";
          type = "memory";
        }
        {
          key = "    󰩟 Local IP     ";
          keyColor = "red";
          type = "localip";
        }
        {
          key = "    󰩠 Public IP    ";
          keyColor = "cyan";
          type = "publicip";
        }
        "break"
        {
          type = "custom";
          format = "└──────────────────────────────────────────────────────────────────────────────┘";
        }
        "break"
        {
          paddingLeft = 34;
          symbol = "circle";
          type = "colors";
        }
      ];
    };
  };
}
</file>

<file path="modules/home-manager/programs/git/default.nix">
{userConfig, ...}: {
  # Install git via home-manager module
  programs.git = {
    enable = true;
    userName = userConfig.fullName;
    userEmail = userConfig.email;
    signing = {
      key = userConfig.gitKey;
      signByDefault = true;
    };
    delta = {
      enable = true;
      options = {
        keep-plus-minus-markers = true;
        light = false;
        line-numbers = true;
        navigate = true;
        width = 280;
      };
    };
    extraConfig = {
      pull.rebase = "true";
    };
  };

  # Enable catppuccin theming for git delta
  catppuccin.delta.enable = true;
}
</file>

<file path="modules/home-manager/programs/go/default.nix">
{...}: {
  # Install and configure Golang via home-manager module
  programs.go = {
    enable = true;
    goBin = "go/bin";
    goPath = "go";
  };

  # Ensure Go bin in the PATH
  home.sessionPath = [
    "$HOME/go/bin"
  ];
}
</file>

<file path="modules/home-manager/programs/lazygit/default.nix">
{...}: {
  # Install lazygit via home-manager module
  programs.lazygit = {
    enable = true;

    settings = {
      git = {
        paging = {
          colorArg = "always";
          pager = "delta --color-only --dark --paging=never";
        };
      };
    };
  };
}
</file>

<file path="modules/home-manager/programs/neovim/lazyvim/lua/config/autocmds.lua">
-- Autocmds are automatically loaded on the VeryLazy event
-- Default autocmds that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/autocmds.lua
-- Add any additional autocmds here
vim.filetype.add({
  pattern = {
    [".*/chart/*/templates/.{yaml,tpl}"] = "helm",
  },
})
</file>

<file path="modules/home-manager/programs/neovim/lazyvim/lua/config/lazy.lua">
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
  local lazyrepo = "https://github.com/folke/lazy.nvim.git"
  local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
  if vim.v.shell_error ~= 0 then
    vim.api.nvim_echo({
      { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
      { out, "WarningMsg" },
      { "\nPress any key to exit..." },
    }, true, {})
    vim.fn.getchar()
    os.exit(1)
  end
end
vim.opt.rtp:prepend(lazypath)

require("lazy").setup({
  spec = {
    { "LazyVim/LazyVim", import = "lazyvim.plugins" },
    { import = "lazyvim.plugins.extras.lsp.none-ls" },
    { import = "plugins" },
  },
  defaults = {
    lazy = false,
    version = false, -- always use the latest git commit
  },
  install = { colorscheme = { "tokyonight", "habamax" } },
  checker = {
    enabled = false,
    notify = false,
  },
  performance = {
    rtp = {
      disabled_plugins = {
        "gzip",
        "tarPlugin",
        "tohtml",
        "tutor",
        "zipPlugin",
      },
    },
  },
})
</file>

<file path="modules/home-manager/programs/neovim/lazyvim/lua/config/options.lua">
-- Options are automatically loaded before lazy.nvim startup
-- Default options that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/options.lua
-- Add any additional options here
vim.opt.winbar = "%=%m %f"
vim.g.lazygit_config = false
vim.g.snacks_animate = false
</file>

<file path="modules/home-manager/programs/neovim/lazyvim/lua/plugins/catppucin.lua">
return {
  {
    "LazyVim/LazyVim",
    opts = {
      colorscheme = "catppuccin-macchiato",
    },
  },
}
</file>

<file path="modules/home-manager/programs/neovim/lazyvim/lua/plugins/mason.lua">
return {
  {
    "williamboman/mason.nvim",
    -- Disable Mason in favor of Nix packages
    enabled = false,
    opts = function(_, opts)
      vim.list_extend(opts.ensure_installed, {
        "bash-language-server",
        "black",
        "goimports",
        "golangci-lint",
        "hadolint",
        "isort",
        "json-lsp",
        "lua-language-server",
        "markdownlint",
        "prettier",
        "pyright",
        "shfmt",
        "stylua",
        "terraform-ls",
        "tflint",
        "yaml-language-server",
      })
    end,
  },
}
</file>

<file path="modules/home-manager/programs/neovim/lazyvim/lua/plugins/neo-tree.lua">
return {
  "nvim-neo-tree/neo-tree.nvim",
  opts = {
    filesystem = {
      filtered_items = {
        visible = true,
        hide_dotfiles = false,
        hide_gitignored = false,
      },
    },
  },
}
</file>

<file path="modules/home-manager/programs/neovim/lazyvim/lua/plugins/tmux-navigator.lua">
return {
  {
    "christoomey/vim-tmux-navigator",
    cmd = {
      "TmuxNavigateLeft",
      "TmuxNavigateDown",
      "TmuxNavigateUp",
      "TmuxNavigateRight",
      "TmuxNavigatePrevious",
    },
    keys = {
      { "<c-h>", "<cmd><C-U>TmuxNavigateLeft<cr>" },
      { "<c-j>", "<cmd><C-U>TmuxNavigateDown<cr>" },
      { "<c-k>", "<cmd><C-U>TmuxNavigateUp<cr>" },
      { "<c-l>", "<cmd><C-U>TmuxNavigateRight<cr>" },
      { "<c-\\>", "<cmd><C-U>TmuxNavigatePrevious<cr>" },
    },
  },
}
</file>

<file path="modules/home-manager/programs/neovim/lazyvim/.luarc.json">
{
  "diagnostics.globals": [
    "yaml_language_server",
    "tflint",
    "terraform_ls",
    "stylua",
    "shfmt",
    "pyright",
    "prittier",
    "markdownlint",
    "lua_language_server",
    "json_lsp",
    "isort",
    "hadolint",
    "golangci_lint",
    "goimports",
    "black",
    "bash_language_server",
    "on_attach"
  ]
}
</file>

<file path="modules/home-manager/programs/neovim/lazyvim/.neoconf.json">
{
  "neodev": {
    "library": {
      "enabled": true,
      "plugins": true
    }
  },
  "neoconf": {
    "plugins": {
      "lua_ls": {
        "enabled": true
      }
    }
  }
}
</file>

<file path="modules/home-manager/programs/neovim/lazyvim/init.lua">
-- bootstrap lazy.nvim, LazyVim and your plugins
require("config.lazy")
</file>

<file path="modules/home-manager/programs/neovim/lazyvim/stylua.toml">
indent_type = "Spaces"
indent_width = 2
column_width = 120
</file>

<file path="modules/home-manager/programs/neovim/default.nix">
{pkgs, ...}: {
  # Neovim text editor configuration
  programs.neovim = {
    enable = true;
    package = pkgs.neovim-unwrapped;
    defaultEditor = true;
    withNodeJs = true;
    withPython3 = true;
    withRuby = true;

    extraPackages = with pkgs; [
      alejandra
      black
      golangci-lint
      gopls
      gotools
      hadolint
      isort
      lua-language-server
      markdownlint-cli
      nixd
      nodePackages.bash-language-server
      nodePackages.prettier
      pyright
      ruff
      shellcheck
      shfmt
      stylua
      terraform-ls
      tflint
      vscode-langservers-extracted
      yaml-language-server
    ];
  };

  # source lua config from this repo
  xdg.configFile = {
    "nvim" = {
      source = ./lazyvim;
      recursive = true;
    };
  };
}
</file>

<file path="modules/home-manager/programs/obs-studio/default.nix">
{
  lib,
  pkgs,
  ...
}: {
  config = lib.mkIf (!pkgs.stdenv.isDarwin) {
    # Install OBS Studio via home-manager module
    programs.obs-studio.enable = true;

    # Enable catppuccin theming for OBS.
    catppuccin.obs.enable = true;
  };
}
</file>

<file path="modules/home-manager/programs/saml2aws/default.nix">
{pkgs, ...}: {
  # Ensure saml2aws package installed
  home.packages = with pkgs; [
    saml2aws
  ];

  # Set session duration via env vars
  home.sessionVariables = {
    AWS_REGION = "eu-west-1";
    SAML2AWS_SESSION_DURATION = "3600";
  };
}
</file>

<file path="modules/home-manager/programs/swappy/default.nix">
{pkgs, ...}: {
  # Ensure swappy package installed
  home.packages = with pkgs; [
    swappy
  ];

  # Source swappy config from the home-manager store
  xdg.configFile = {
    "swappy/config".text = ''
      [Default]
      save_dir=$HOME/Pictures
      save_filename_format=screenshot-%Y%m%d-%H%M%S.png
    '';
  };
}
</file>

<file path="modules/home-manager/programs/telegram/default.nix">
{
  pkgs,
  lib,
  ...
}: {
  # Ensure Telegram desktop package installed
  home.packages = with pkgs; [
    telegram-desktop
  ];

  # XDG configuration (only on non-Darwin platforms)
  xdg = lib.mkIf (!pkgs.stdenv.isDarwin) {
    mimeApps = {
      associations.added = {
        "x-scheme-handler/tg" = ["org.telegram.desktop.desktop"];
        "x-scheme-handler/tonsite" = ["org.telegram.desktop.desktop"];
      };
      defaultApplications = {
        "x-scheme-handler/tg" = ["org.telegram.desktop.desktop"];
        "x-scheme-handler/tonsite" = ["org.telegram.desktop.desktop"];
      };
    };
  };
}
</file>

<file path="modules/home-manager/programs/tmux/default.nix">
{...}: {
  # Tmux terminal multiplexer configuration
  programs.tmux = {
    enable = true;
    baseIndex = 1;
    escapeTime = 10;
    historyLimit = 10000;
    keyMode = "vi";
    mouse = true;
    sensibleOnTop = false;
    terminal = "screen-256color";

    extraConfig = ''
      # Set the prefix to `ctrl + q` instead of `ctrl + b`
      set -g prefix C-q
      unbind C-b

      # Use | and - to split a window vertically and horizontally instead of " and % respoectively
      unbind '"'
      unbind %
      bind v split-window -h -c "#{pane_current_path}"
      bind s split-window -v -c "#{pane_current_path}"

      # Bind Arrow keys to resize the window
      bind -n S-Down resize-pane -D 8
      bind -n S-Up resize-pane -U 8
      bind -n S-Left resize-pane -L 8
      bind -n S-Right resize-pane -R 8

      # Rename window with prefix + r
      bind r command-prompt -I "#W" "rename-window '%%'"

      # Reload tmux config by pressing prefix + R
      bind R source-file ~/.config/tmux/tmux.conf \; display "TMUX Conf Reloaded"

      # Clear screen with prefix + l
      bind C-l send-keys 'C-l'

      # Open a project in a separate window
      bind-key -n C-f run-shell "tmux new-window -t 10 -n project-selector cd-to-project"

      # Apply Tc
      set -ga terminal-overrides ",xterm-256color:RGB:smcup@:rmcup@"

      # Enable focus-events
      set -g focus-events on

      # Set default escape-time
      set-option -sg escape-time 10

      # Smart pane switching with awareness of Vim splits
      is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf|atuin)(diff)?$'"
      bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
      bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
      bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
      bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

      bind-key -T copy-mode-vi 'C-h' select-pane -L
      bind-key -T copy-mode-vi 'C-j' select-pane -D
      bind-key -T copy-mode-vi 'C-k' select-pane -U
      bind-key -T copy-mode-vi 'C-l' select-pane -R
    '';
  };

  # Enable catppuccin theming for tmux.
  catppuccin = {
    tmux = {
      enable = true;
      extraConfig = ''
        set -g @catppuccin_flavor "macchiato"
        set -g @catppuccin_status_background "none"

        set -g @catppuccin_window_current_number_color "#{@thm_peach}"
        set -g @catppuccin_window_current_text " #W"
        set -g @catppuccin_window_current_text_color "#{@thm_bg}"
        set -g @catppuccin_window_number_color "#{@thm_blue}"
        set -g @catppuccin_window_text " #W"
        set -g @catppuccin_window_text_color "#{@thm_surface_0}"
        set -g @catppuccin_status_left_separator "█"

        set -g status-right "#{E:@catppuccin_status_host}#{E:@catppuccin_status_date_time}"
        set -g status-left ""
      '';
    };
  };
}
</file>

<file path="modules/home-manager/programs/wofi/default.nix">
{...}: {
  # Install wofi via home-manager module
  programs.wofi = {
    enable = true;
    settings = {
      insensitive = true;
      normal_window = true;
      prompt = "Search...";
      width = "50%";
      height = "40%";
      key_up = "Ctrl-k";
      key_down = "Ctrl-j";
    };
  };
}
</file>

<file path="modules/home-manager/scripts/bin/asg-getter">
#!/usr/bin/env python3
"""
This script is designed to assist in managing AWS Kubernetes clusters, it provides functionality
for querying information about ASGs, and their respective instances using AWS CLI and kubectl.

Features:
- Cluster Information Retrieval: Fetches the current AWS Kubernetes cluster's name and default region.
- Auto Scaling Group Interaction: Lists ASGs associated with the Kubernetes cluster and allows the user
  to select an ASG to query further.
- Instance Information: For a selected ASG, lists all EC2 instances and retrieves their corresponding
  Kubernetes node names.

Dependencies:
- AWS CLI: For interacting with AWS services.
- kubectl: For Kubernetes cluster management.
- Python 3 and standard libraries: re, subprocess, sys.

Usage:
The script is executed as a standalone Python script. It guides the user through a series of prompts to select
the desired ASG and view details about its instances.
"""

__author__ = "Alexander Nabokikh"
__license__ = "GPL-2.0 license"


import re
import subprocess
import sys


def check_dependency(command):
    """
    Check if a command-line dependency exists.

    Args:
        command (str): The name of the command to check.

    Raises:
        SystemExit: If the command is not found.
    """
    try:
        subprocess.run([command, "--version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except FileNotFoundError:
        print(f"Error: The command '{command}' is not found. Please install it before proceeding.")
        sys.exit(1)


def fetch_cluster_info():
    """
    Fetches AWS cluster name and default region from `kubectl config current-context`.

    Returns:
        tuple: AWS_DEFAULT_REGION and CLUSTER_NAME or None if an error occurs.
    """
    command = ["kubectl", "config", "current-context"]
    cluster_info = run_command(command)
    if not cluster_info:
        print("Failed to fetch cluster information.")
        return None, None

    match = re.search(r"arn:aws:eks:(.+?):\d+:cluster/(.+)$", cluster_info)
    if match:
        region, cluster_name = match.groups()
        return region, cluster_name

    return None, None


def prompt(message):
    """
    Prompt the user for a 'y' or 'n' response.

    Args:
        message (str): The message to display to the user.

    Returns:
        bool: True if 'y', False if 'n'.

    Raises:
        SystemExit: If the operation is cancelled by the user.
    """
    while True:
        try:
            ans = input(message)
            if ans.lower() == "y":
                return True
            elif ans.lower() == "n":
                return False
            else:
                print("Invalid input. Please enter 'y' or 'n'.")
        except KeyboardInterrupt:
            print("\nOperation cancelled by the user.")
            sys.exit(0)


def get_input(label):
    """
    Get input from the user.

    Args:
        label (str): Label for the input field.

    Returns:
        str: User input.

    Raises:
        SystemExit: If the operation is cancelled by the user.
    """
    try:
        return input(f"Please enter the {label}: ")
    except KeyboardInterrupt:
        print("\nOperation cancelled by the user.")
        sys.exit(0)


def run_command(command):
    """
    Run a shell command.

    Args:
        command (list): The command to run.

    Returns:
        str or None: The stdout as a string or None if an error occurs.

    Raises:
        SystemExit: If the operation is cancelled by the user.
    """
    try:
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        stdout, stderr = process.communicate()
        if process.returncode != 0:
            print(f"Command failed with error: {stderr}")
            return None
        return stdout.strip()
    except KeyboardInterrupt:
        print("\nOperation cancelled by the user.")
        sys.exit(0)


def get_asgs(region, cluster_name):
    """
    Get the Auto Scaling Groups for a given cluster in a region.

    Args:
        region (str): AWS region.
        cluster_name (str): Name of the cluster.

    Returns:
        list: List of Auto Scaling Groups or empty list if none found.
    """
    command = [
        "aws",
        "autoscaling",
        "describe-auto-scaling-groups",
        "--query",
        f"AutoScalingGroups[? Tags[? (Key=='kubernetes.io/cluster/{cluster_name}') && Value=='owned']].AutoScalingGroupName",
        "--output",
        "text",
        "--region",
        region,
    ]
    asgs_str = run_command(command)
    return asgs_str.split("\t") if asgs_str else []


def get_instances_in_asg(region, asg):
    """
    Get the EC2 instances in a given Auto Scaling Group in a region.

    Args:
        region (str): AWS region.
        asg (str): Name of the Auto Scaling Group.

    Returns:
        list: List of instance IDs or empty list if none found.
    """
    command = [
        "aws",
        "autoscaling",
        "describe-auto-scaling-groups",
        "--auto-scaling-group-name",
        asg,
        "--query",
        "AutoScalingGroups[].Instances[][InstanceId]",
        "--output",
        "text",
        "--region",
        region,
    ]
    ins_str = run_command(command)
    return ins_str.split() if ins_str else []


def get_node_by_instance(region, instance_id):
    """
    Get the node name by instance ID.

    Args:
        region (str): AWS region.
        instance_id (str): EC2 instance ID.

    Returns:
        str or None: Node name as a string or None if an error occurs.
    """
    command = [
        "aws",
        "ec2",
        "describe-instances",
        "--instance-ids",
        instance_id,
        "--query",
        "Reservations[].Instances[].PrivateDnsName",
        "--output",
        "text",
        "--region",
        region,
    ]
    return run_command(command)


def main():
    """
    Main function.
    """
    for cmd in ["aws", "kubectl"]:
        check_dependency(cmd)

    AWS_DEFAULT_REGION, CLUSTER_NAME = fetch_cluster_info()

    asgs = get_asgs(AWS_DEFAULT_REGION, CLUSTER_NAME)
    if not asgs:
        print("No ASGs found.")
        exit(1)

    print("Found the following Auto Scaling Groups:")
    for idx, asg in enumerate(asgs):
        print(f"{idx + 1}. {asg}")

    while True:
        asg_number = int(get_input("Enter the number corresponding to the ASG you want to query"))
        if 1 <= asg_number <= len(asgs):
            selected_asg = asgs[asg_number - 1]
        else:
            print("Invalid ASG number.")
            sys.exit(1)

        print(f"Querying information for autoscaling-group: {selected_asg}")
        instances = get_instances_in_asg(AWS_DEFAULT_REGION, selected_asg)

        if not instances:
            print("No instances found in the selected ASG.")
        else:
            for instance in instances:
                node = get_node_by_instance(AWS_DEFAULT_REGION, instance)
                if node:
                    subprocess.run(["kubectl", "get", "node", node, "--no-headers=true"])

        if not prompt("Would you like to query another ASG? (y/n): "):
            break


if __name__ == "__main__":
    main()
</file>

<file path="modules/home-manager/scripts/bin/asg-rotator">
#!/usr/bin/env python3
"""
This script automates the process of updating Kubernetes nodes in an AWS environment. It integrates
AWS CLI and kubectl to rotate nodes within Auto Scaling Groups (ASGs).

Features:
- Cluster Information Retrieval: Fetches the name and default region of the current AWS Kubernetes cluster.
- ASG and Instance Management: Lists ASGs associated with the cluster, allows the user to select an ASG,
  and fetches EC2 instance IDs within the selected ASG.
- Node Management: For each EC2 instance, identifies the corresponding Kubernetes node, checks its 
  Kubernetes version, and performs updates if necessary.
- Draining and Deleting Nodes: Drains Kubernetes nodes that don't match the specified version and 
  then deletes them after a specified wait time.
- User Interaction: Prompts the user for inputs and confirmation, handles keyboard interrupts and 
  unexpected inputs.

Dependencies:
- AWS CLI: For interacting with AWS services.
- kubectl: For Kubernetes cluster management.
- Python 3 and standard libraries: json, re, subprocess, sys, time.

Usage:
The script is executed as a standalone Python script. It guides the user through selecting an ASG,
specifying the target Kubernetes version, and then proceeds to update the nodes.
"""

__author__ = "Alexander Nabokikh"
__license__ = "GPL-2.0 license"


import json
import re
import subprocess
import sys
import time


def check_dependency(command):
    """
    Check if a given command-line tool is installed.

    Args:
        command (str): The command-line tool to check.

    Raises:
        SystemExit: If the command is not installed.
    """
    try:
        subprocess.run([command, "--version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except FileNotFoundError:
        print(f"Error: The command '{command}' is not found. Please install it before proceeding.")
        sys.exit(1)


def fetch_cluster_info():
    """
    Fetches AWS cluster name and default region from `kubectl config current-context`.

    Returns:
        tuple: AWS_DEFAULT_REGION and CLUSTER_NAME or None if an error occurs.
    """
    command = ["kubectl", "config", "current-context"]
    cluster_info = run_command(command)
    if not cluster_info:
        print("Failed to fetch cluster information.")
        return None, None

    match = re.search(r"arn:aws:eks:(.+?):\d+:cluster/(.+)$", cluster_info)
    if match:
        region, cluster_name = match.groups()
        return region, cluster_name

    return None, None


def run_command(command_list, capture_output=True):
    """
    Run a shell command and capture its output.

    Args:
        command_list (list): List of command and arguments.
        capture_output (bool, optional): Whether to capture output. Defaults to True.

    Returns:
        str: The standard output of the command.

    Raises:
        SystemExit: If the command fails to execute.
    """
    try:
        result = subprocess.run(command_list, capture_output=capture_output, text=True, check=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Command failed with error: {e}")
        sys.exit(1)


def prompt():
    """
    Prompt the user to continue or not.

    Returns:
        bool: True if the user wants to continue, False otherwise.

    Raises:
        SystemExit: If the operation is cancelled by the user.
    """
    while True:
        try:
            ans = input("Continue? (y/n): ")
            if ans.lower() == "y":
                return True
            elif ans.lower() == "n":
                return False
            else:
                print("Invalid input. Please enter 'y' or 'n'.")
        except KeyboardInterrupt:
            print("\nOperation cancelled by the user.")
            sys.exit(0)


def get_input(label):
    """
    Get input from the user.

    Args:
        label (str): Label for the input field.

    Returns:
        str: User input.

    Raises:
        SystemExit: If the operation is cancelled by the user.
    """
    try:
        return input(f"Please enter the {label}: ")
    except KeyboardInterrupt:
        print("\nOperation cancelled by the user.")
        sys.exit(0)


def get_asgs(region, cluster_name):
    """
    Get the Auto Scaling Groups for a given cluster in a region.

    Args:
        region (str): AWS region.
        cluster_name (str): Name of the cluster.

    Returns:
        list: List of Auto Scaling Groups or empty list if none found.
    """
    command = [
        "aws",
        "autoscaling",
        "describe-auto-scaling-groups",
        "--query",
        f"AutoScalingGroups[? Tags[? (Key=='kubernetes.io/cluster/{cluster_name}') && Value=='owned']].AutoScalingGroupName",
        "--output",
        "text",
        "--region",
        region,
    ]
    asgs_str = run_command(command)
    return asgs_str.split("\t") if asgs_str else []


def get_instances(asg_name, region):
    """
    Get a list of instance IDs for a given Auto Scaling Group (ASG).

    Args:
        ASG_NAME (str): The name of the ASG.

    Returns:
        list: List of instance IDs.
    """
    return run_command(
        [
            "aws",
            "autoscaling",
            "describe-auto-scaling-groups",
            "--auto-scaling-group-name",
            asg_name,
            "--region",
            region,
            "--query",
            "AutoScalingGroups[].Instances[][InstanceId]",
            "--output",
            "text",
        ]
    ).split()


def get_node_name(instance_id, region):
    """
    Get the node name corresponding to a given EC2 instance ID.

    Args:
        instance_id (str): EC2 instance ID.

    Returns:
        str: Node name.
    """
    return run_command(
        [
            "aws",
            "ec2",
            "describe-instances",
            "--instance-ids",
            instance_id,
            "--region",
            region,
            "--query",
            "Reservations[].Instances[].PrivateDnsName",
            "--output",
            "text",
        ]
    )


def get_node_version(node_name):
    """
    Get the Kubernetes version for a given node.

    Args:
        node_name (str): The name of the Kubernetes node.

    Returns:
        str: The Kubernetes version of the node.
    """
    try:
        result = subprocess.run(
            [
                "kubectl",
                "get",
                "node",
                node_name,
                "-o",
                "custom-columns=VERSION:.status.nodeInfo.kubeletVersion",
                "--no-headers=true",
            ],
            check=True,
            text=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError:
        return None


def main():
    """
    The main function that orchestrates the entire process of updating Kubernetes nodes.
    """
    for cmd in ["aws", "kubectl"]:
        check_dependency(cmd)

    AWS_DEFAULT_REGION, CLUSTER_NAME = fetch_cluster_info()

    WAIT = 15

    asgs = get_asgs(AWS_DEFAULT_REGION, CLUSTER_NAME)
    if not asgs:
        print("No ASGs found.")
        exit(1)

    print("Found the following Auto Scaling Groups:")
    for idx, asg in enumerate(asgs):
        print(f"{idx + 1}. {asg}")

    asg_number = int(get_input("Enter the number corresponding to the ASG"))
    if 1 <= asg_number <= len(asgs):
        selected_asg = asgs[asg_number - 1]
    else:
        print("Invalid ASG number.")
        sys.exit(1)

    K8S_VERSION = get_input("Enter the target Kubernetes version (e.g., 1.24)")
    if not K8S_VERSION:
        print("Error - Kubernetes version not provided.")
        sys.exit(1)

    instances = get_instances(selected_asg, AWS_DEFAULT_REGION)

    for instance in instances:
        node_name = get_node_name(instance, AWS_DEFAULT_REGION)
        print(f"Node name: {node_name}")

        node_version = get_node_version(node_name)

        if not node_version:
            print("Version is empty. Skipping...")
            continue

        if K8S_VERSION in node_version:
            print(f"Node {node_name} matches desired version {K8S_VERSION}. Skipping...")
            continue

        print(f"Do you want to proceed with draining the node {node_name}?")
        if not prompt():
            print("Skipping this node.")
            continue

        subprocess.run(
            ["kubectl", "drain", "--ignore-daemonsets=true", "--delete-emptydir-data=true", "--force", node_name]
        )

        print(f"Checking for pods on node {node_name} ...")

        pod_data = json.loads(run_command(["kubectl", "get", "po", "-A", "-o", "json"]))

        for item in pod_data["items"]:
            try:
                if item["spec"]["nodeName"] == node_name:
                    print(item["metadata"]["name"])
            except KeyError:
                print(f"KeyError: 'nodeName' not found in item: {item['metadata']['name']}")

        print(f"Deleting node in {WAIT} seconds... press Ctrl-C to abort")
        time.sleep(WAIT)
        run_command(["kubectl", "delete", "node", node_name])

        print(f"Terminating EC2 instance {instance} ...")
        run_command(["aws", "ec2", "terminate-instances", "--instance-ids", instance, "--region", AWS_DEFAULT_REGION])


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nOperation cancelled by the user. Exiting...")
        sys.exit(1)
</file>

<file path="modules/home-manager/scripts/bin/cd-to-project">
#!/usr/bin/env bash

selected=$(find ~/Documents/repositories -mindepth 1 -maxdepth 2 -type d -not -iwholename '*.git*' | fzf)
if [ -n "$selected" ]; then
	tmux new-window -c "$selected" -n "$(basename "$selected")" || exit
fi
</file>

<file path="modules/home-manager/scripts/bin/fif">
#!/usr/bin/env bash

if [ ! "$#" -gt 0 ]; then
	echo "Need a string to search for!"
	return 1
fi

rg --hidden --glob '!.git' --files-with-matches --no-messages "$1" | fzf --preview "rg --ignore-case --pretty --context 10 '$1' {}"
</file>

<file path="modules/home-manager/scripts/bin/fkill">
#!/usr/bin/env bash

pid=$(ps -ef | sed 1d | fzf | awk '{print $2}')

if [ "x$pid" != "x" ]; then
	sudo kill -"${1:-9}" "$pid"
fi
</file>

<file path="modules/home-manager/scripts/bin/git-reset">
#!/usr/bin/env python3
"""
This script is designed to automate the process of resetting multiple Git repositories to their latest
commit on the current branch. It is especially useful in environments where multiple repositories are
managed simultaneously and require frequent synchronization.

Features:
- Git Repository Reset: Resets any identified Git repository to the latest commit on its current branch.
- Directory Traversal: Scans a specified base directory (defaulting to the current directory) to find 
  all directories containing a Git repository.
- Terragrunt Cache Exclusion: Skips over directories named '.terragrunt-cache', which are typically 
  used for caching in Terraform workflows.

Dependencies:
- Git: For managing and resetting the repositories.
- Python 3 and standard libraries: os, subprocess.

Usage:
The script is executed as a standalone Python script. It requires no additional input from the user,
automatically finding and resetting Git repositories in the current or specified directory.
"""

__author__ = "Alexander Nabokikh"
__license__ = "GPL-2.0 license"


import os
import subprocess


def reset_git_repo(path):
    """Reset a git repository to the latest commit on the current branch."""
    old_cwd = os.getcwd()

    try:
        os.chdir(path)
        subprocess.run(["git", "reset", "--hard", "HEAD"])
    finally:
        os.chdir(old_cwd)


def find_git_dirs(base="."):
    """Find all directories containing a .git directory and excluding .terragrunt-cache."""
    for root, dirs, _ in os.walk(base):
        if ".terragrunt-cache" in dirs:
            dirs.remove(".terragrunt-cache")

        if ".git" in dirs:
            yield root


def main():
    """Main function."""
    try:
        for git_repo in find_git_dirs():
            print(f"Resetting repository: {git_repo}")
            reset_git_repo(git_repo)
    except KeyboardInterrupt:
        print("\nScript interrupted by the user. Exiting.")


if __name__ == "__main__":
    main()
</file>

<file path="modules/home-manager/scripts/bin/pull-all">
#!/usr/bin/env python3
"""
This script automates the process of updating Git repositories located in a specified directory.
It walks through the directory structure, identifies Git repositories, determines their main branch,
and performs a 'git pull' operation to update each repository.

Features:
- Git Repository Identification: Checks directories to determine if they are Git repositories.
- Main Branch Detection: Dynamically identifies the main branch for each repository.
- Automated Git Pull: Executes a 'git pull' command for the main branch of each repository.
- Directory Exclusion: Excludes directories related to Terraform and Terragrunt to avoid unnecessary processing.

Dependencies:
- Git: For managing and updating the repositories.
- Python 3 and standard libraries: os, subprocess.

Usage:
The script is executed as a standalone Python script. It automatically searches for Git repositories 
in a predefined directory (default is '~/Documents/repositories') and updates them.
"""

__author__ = "Alexander Nabokikh"
__license__ = "GPL-2.0 license"


import os
import subprocess

repo_directory = os.path.expanduser("~/Documents/repositories")


def is_git_directory(directory):
    """
    Checks if a directory is a Git repository by looking for a .git subdirectory.
    """
    return os.path.isdir(os.path.join(directory, ".git"))


def get_git_main_branch(directory):
    """
    Determines the name of the main branch for the Git repository located at 'directory'.
    """
    os.chdir(directory)
    try:
        result = subprocess.run(
            ["git", "rev-parse", "--abbrev-ref", "HEAD"], check=True, capture_output=True, text=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Failed to determine the main branch for {directory}. Error: {str(e)}")
        return None


def git_pull(directory):
    """
    Performs a Git pull operation in the specified directory.
    """
    os.chdir(directory)  # Navigate to directory
    main_branch = get_git_main_branch(directory)

    if main_branch is None:
        print(f"Skipping pull operation for {directory}.")
        return

    try:
        # Run git pull command for the detected main branch
        subprocess.run(["git", "pull", "origin", main_branch], check=True, capture_output=True, text=True)
        print(f"Successfully updated {directory} from '{main_branch}' branch.")
    except subprocess.CalledProcessError as e:
        print(f"Failed to update {directory} from '{main_branch}' branch. Error: {str(e)}")


def main():
    if os.path.exists(repo_directory):
        for root, dirs, _ in os.walk(repo_directory):
            for dir in dirs:
                full_dir_path = os.path.join(root, dir)

                # Skip if the directory is under a .terraform directory
                if ".terraform" in full_dir_path.split("/") or ".terragrunt-cache" in full_dir_path.split("/"):
                    continue

                if is_git_directory(full_dir_path):
                    git_pull(full_dir_path)
    else:
        print(f"The directory {repo_directory} does not exist.")


if __name__ == "__main__":
    main()
</file>

<file path="modules/home-manager/scripts/bin/screen-recorder">
#!/usr/bin/env bash

VIDEODIR="$HOME/Videos"
DATE_FORMAT="+%Y-%m-%d_%H-%M-%S"

if ! pgrep "wf-recorder" >/dev/null; then
	if [ ! -d "$VIDEODIR" ]; then
		mkdir -p "$VIDEODIR"
	fi
	FILENAME="$VIDEODIR/$(date --utc "$DATE_FORMAT").mp4"
	wf-recorder -f "$FILENAME" -g "$(slurp -c "#FFFFFF")" &>/dev/null &
else
	killall -s SIGINT wf-recorder
fi
</file>

<file path="modules/home-manager/scripts/bin/terra-clean">
#!/usr/bin/env python3
"""
This script is designed to recursively search for and delete .terraform and .terragrunt-cache
directories within a specified base directory (~/Documents/repositories/).

Features:
- Directory Traversal: Scans the ~/Documents/repositories/ directory to find all .terraform
  and .terragrunt-cache directories.
- Directory Deletion: Removes identified .terraform and .terragrunt-cache directories.
- Error Handling: Provides feedback on successful deletions and any errors encountered.

Dependencies:
- Python 3 and standard libraries: os, shutil.

Usage:
The script is executed as a standalone Python script. It requires no additional input from the user,
automatically finding and deleting .terraform and .terragrunt-cache directories in the specified path.
"""

__author__ = "Assistant"
__license__ = "GPL-2.0 license"

import os
import shutil


def delete_directory(path):
    """Delete a directory and its contents."""
    try:
        shutil.rmtree(path)
        print(f"Deleted: {path}")
    except Exception as e:
        print(f"Error deleting {path}: {e}")


def find_and_delete_dirs(base):
    """Find and delete .terraform and .terragrunt-cache directories."""
    for root, dirs, _ in os.walk(base, topdown=False):
        for dir_name in [".terraform", ".terragrunt-cache"]:
            if dir_name in dirs:
                path_to_delete = os.path.join(root, dir_name)
                delete_directory(path_to_delete)
                dirs.remove(dir_name)


def main():
    """Main function."""
    base_directory = os.path.expanduser("~/Documents/repositories/")

    if not os.path.exists(base_directory):
        print(f"The specified directory does not exist: {base_directory}")
        return

    try:
        find_and_delete_dirs(base_directory)
        print("Finished searching and deleting .terraform and .terragrunt-cache directories.")
    except KeyboardInterrupt:
        print("\nScript interrupted by the user. Exiting.")


if __name__ == "__main__":
    main()
</file>

<file path="modules/home-manager/scripts/bin/waybar-restart">
#!/usr/bin/env bash

echo "Attempting to stop any running instance of waybar..."
pkill waybar

sleep 1

if pgrep waybar >/dev/null 2>&1; then
	echo "Failed to stop waybar." >&2
else
	echo "Waybar stopped successfully."
	echo "Starting waybar..."
	waybar &>/dev/null &
	disown
	echo "Waybar restarted successfully."
fi
</file>

<file path="modules/home-manager/scripts/default.nix">
{
  pkgs,
  lib,
  ...
}: {
  # Source scripts from the home-manager store
  home.file = {
    ".local/bin" = {
      recursive = true;
      source = ./bin;
    };
  };

  # Conditional configuration for Darwin systems
  home.sessionPath = lib.mkMerge [
    (lib.mkIf pkgs.stdenv.isDarwin [
      "$HOME/.local/bin"
    ])
  ];
}
</file>

<file path="modules/home-manager/services/cliphist/default.nix">
{...}: {
  # Install cliphist via home-manager module
  services.cliphist = {
    enable = true;
    systemdTargets = "hyprland-session.target";
  };
}
</file>

<file path="modules/home-manager/services/swaync/default.nix">
{...}: {
  # Install swaync via home-manager module
  services.swaync = {
    enable = true;
  };

  # Source swaync config from the home-manager store
  xdg.configFile = {
    "swaync/style.css" = {
      source = ./style.css;
    };
  };
}
</file>

<file path="modules/home-manager/services/swaync/style.css">
* {
  all: unset;
  font-size: 14px;
  font-family: "Roboto Nerd Font";
  transition: 200ms;
}

trough highlight {
  background: #cad3f5;
}

scale trough {
  margin: 0rem 1rem;
  background-color: #363a4f;
  min-height: 8px;
  min-width: 70px;
}

slider {
  background-color: #8aadf4;
}

.floating-notifications.background .notification-row .notification-background {
  box-shadow:
    0 0 8px 0 rgba(0, 0, 0, 0.8),
    inset 0 0 0 1px #363a4f;
  border-radius: 8px;
  margin: 18px;
  background-color: #24273a;
  color: #cad3f5;
  padding: 0;
}

.floating-notifications.background
  .notification-row
  .notification-background
  .notification {
  padding: 7px;
  border-radius: 8px;
}

.floating-notifications.background
  .notification-row
  .notification-background
  .notification.critical {
  box-shadow: inset 0 0 7px 0 #ed8796;
}

.floating-notifications.background
  .notification-row
  .notification-background
  .notification
  .notification-content {
  margin: 7px;
}

.floating-notifications.background
  .notification-row
  .notification-background
  .notification
  .notification-content
  .summary {
  color: #cad3f5;
}

.floating-notifications.background
  .notification-row
  .notification-background
  .notification
  .notification-content
  .time {
  color: #a5adcb;
}

.floating-notifications.background
  .notification-row
  .notification-background
  .notification
  .notification-content
  .body {
  color: #cad3f5;
}

.floating-notifications.background
  .notification-row
  .notification-background
  .notification
  > *:last-child
  > * {
  min-height: 3.4em;
}

.floating-notifications.background
  .notification-row
  .notification-background
  .notification
  > *:last-child
  > *
  .notification-action {
  border-radius: 8px;
  color: #cad3f5;
  background-color: #363a4f;
  box-shadow: inset 0 0 0 1px #494d64;
  margin: 7px;
}

.floating-notifications.background
  .notification-row
  .notification-background
  .notification
  > *:last-child
  > *
  .notification-action:hover {
  box-shadow: inset 0 0 0 1px #494d64;
  background-color: #363a4f;
  color: #cad3f5;
}

.floating-notifications.background
  .notification-row
  .notification-background
  .notification
  > *:last-child
  > *
  .notification-action:active {
  box-shadow: inset 0 0 0 1px #494d64;
  background-color: #7dc4e4;
  color: #cad3f5;
}

.floating-notifications.background
  .notification-row
  .notification-background
  .close-button {
  margin: 7px;
  padding: 2px;
  border-radius: 8px;
  color: #24273a;
  background-color: #ed8796;
}

.floating-notifications.background
  .notification-row
  .notification-background
  .close-button:hover {
  background-color: #ee99a0;
  color: #24273a;
}

.floating-notifications.background
  .notification-row
  .notification-background
  .close-button:active {
  background-color: #ed8796;
  color: #24273a;
}

.control-center {
  box-shadow:
    0 0 8px 0 rgba(0, 0, 0, 0.8),
    inset 0 0 0 1px #363a4f;
  border-radius: 8px;
  margin: 18px;
  background-color: #24273a;
  color: #cad3f5;
  padding: 14px;
}

.control-center .widget-title > label {
  color: #cad3f5;
  font-size: 1.3em;
}

.control-center .widget-title button {
  border-radius: 8px;
  color: #cad3f5;
  background-color: #363a4f;
  box-shadow: inset 0 0 0 1px #494d64;
  padding: 8px;
}

.control-center .widget-title button:hover {
  box-shadow: inset 0 0 0 1px #494d64;
  background-color: #5b6078;
  color: #cad3f5;
}

.control-center .widget-title button:active {
  box-shadow: inset 0 0 0 1px #494d64;
  background-color: #7dc4e4;
  color: #24273a;
}

.control-center .notification-row .notification-background {
  border-radius: 8px;
  color: #cad3f5;
  background-color: #363a4f;
  box-shadow: inset 0 0 0 1px #494d64;
  margin-top: 14px;
}

.control-center .notification-row .notification-background .notification {
  padding: 7px;
  border-radius: 8px;
}

.control-center
  .notification-row
  .notification-background
  .notification.critical {
  box-shadow: inset 0 0 7px 0 #ed8796;
}

.control-center
  .notification-row
  .notification-background
  .notification
  .notification-content {
  margin: 7px;
}

.control-center
  .notification-row
  .notification-background
  .notification
  .notification-content
  .summary {
  color: #cad3f5;
}

.control-center
  .notification-row
  .notification-background
  .notification
  .notification-content
  .time {
  color: #a5adcb;
}

.control-center
  .notification-row
  .notification-background
  .notification
  .notification-content
  .body {
  color: #cad3f5;
}

.control-center
  .notification-row
  .notification-background
  .notification
  > *:last-child
  > * {
  min-height: 3.4em;
}

.control-center
  .notification-row
  .notification-background
  .notification
  > *:last-child
  > *
  .notification-action {
  border-radius: 8px;
  color: #cad3f5;
  background-color: #181926;
  box-shadow: inset 0 0 0 1px #494d64;
  margin: 7px;
}

.control-center
  .notification-row
  .notification-background
  .notification
  > *:last-child
  > *
  .notification-action:hover {
  box-shadow: inset 0 0 0 1px #494d64;
  background-color: #363a4f;
  color: #cad3f5;
}

.control-center
  .notification-row
  .notification-background
  .notification
  > *:last-child
  > *
  .notification-action:active {
  box-shadow: inset 0 0 0 1px #494d64;
  background-color: #7dc4e4;
  color: #cad3f5;
}

.control-center .notification-row .notification-background .close-button {
  margin: 7px;
  padding: 2px;
  border-radius: 8px;
  color: #24273a;
  background-color: #ee99a0;
}

.close-button {
  border-radius: 8px;
}

.control-center .notification-row .notification-background .close-button:hover {
  background-color: #ed8796;
  color: #24273a;
}

.control-center
  .notification-row
  .notification-background
  .close-button:active {
  background-color: #ed8796;
  color: #24273a;
}

.control-center .notification-row .notification-background:hover {
  box-shadow: inset 0 0 0 1px #494d64;
  background-color: #8087a2;
  color: #cad3f5;
}

.control-center .notification-row .notification-background:active {
  box-shadow: inset 0 0 0 1px #494d64;
  background-color: #7dc4e4;
  color: #cad3f5;
}

.notification.critical progress {
  background-color: #ed8796;
}

.notification.low progress,
.notification.normal progress {
  background-color: #8aadf4;
}

.control-center-dnd {
  margin-top: 5px;
  border-radius: 8px;
  background: #363a4f;
  border: 1px solid #494d64;
  box-shadow: none;
}

.control-center-dnd:checked {
  background: #363a4f;
}

.control-center-dnd slider {
  background: #494d64;
  border-radius: 8px;
}

.widget-dnd {
  margin: 0px;
  font-size: 1.1rem;
}

.widget-dnd > switch {
  font-size: initial;
  border-radius: 8px;
  background: #363a4f;
  border: 1px solid #494d64;
  box-shadow: none;
}

.widget-dnd > switch:checked {
  background: #363a4f;
}

.widget-dnd > switch slider {
  background: #494d64;
  border-radius: 8px;
  border: 1px solid #6e738d;
}

.widget-mpris .widget-mpris-player {
  background: #363a4f;
  padding: 7px;
}

.widget-mpris .widget-mpris-title {
  font-size: 1.2rem;
}

.widget-mpris .widget-mpris-subtitle {
  font-size: 0.8rem;
}

.widget-menubar > box > .menu-button-bar > button > label {
  font-size: 3rem;
  padding: 0.5rem 2rem;
}

.widget-menubar > box > .menu-button-bar > :last-child {
  color: #ed8796;
}

.power-buttons button:hover,
.powermode-buttons button:hover,
.screenshot-buttons button:hover {
  background: #363a4f;
}

.control-center .widget-label > label {
  color: #cad3f5;
  font-size: 2rem;
}

.widget-buttons-grid {
  padding-top: 1rem;
}

.widget-buttons-grid > flowbox > flowboxchild > button label {
  font-size: 2.5rem;
}

.widget-volume {
  padding-top: 1rem;
}

.widget-volume label {
  font-size: 1.5rem;
  color: #7dc4e4;
}

.widget-volume trough highlight {
  background: #7dc4e4;
}

.widget-backlight trough highlight {
  background: #eed49f;
}

.widget-backlight scale {
  margin-right: 1rem;
}

.widget-backlight label {
  font-size: 1.5rem;
  color: #eed49f;
}

.widget-backlight .KB {
  padding-bottom: 1rem;
}

.image {
  padding-right: 0.5rem;
}
</file>

<file path="modules/nixos/programs/steam/default.nix">
{...}: {
  # Steam gaming platform configuration
  programs.steam = {
    enable = true;
    remotePlay.openFirewall = true;
  };
}
</file>

<file path="overlays/default.nix">
{inputs, ...}: {
  # When applied, the stable nixpkgs set (declared in the flake inputs) will
  # be accessible through 'pkgs.stable'
  stable-packages = final: _prev: {
    stable = import inputs.nixpkgs-stable {
      system = final.system;
      config.allowUnfree = true;
    };
  };
}
</file>

<file path="hosts/nabokikh-z13/default.nix">
{
  inputs,
  hostname,
  nixosModules,
  ...
}: {
  imports = [
    inputs.hardware.nixosModules.lenovo-thinkpad-z13-gen1

    ./hardware-configuration.nix
    "${nixosModules}/common"
    "${nixosModules}/services/tlp"
    "${nixosModules}/desktop/hyprland"
  ];

  # Set hostname
  networking.hostName = hostname;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  system.stateVersion = "25.05";
}
</file>

<file path="modules/home-manager/desktop/hyprland/default.nix">
{
  config,
  lib,
  nhModules,
  pkgs,
  ...
}: {
  imports = [
    "${nhModules}/misc/gtk"
    "${nhModules}/misc/wallpaper"
    "${nhModules}/misc/xdg"
    "${nhModules}/programs/swappy"
    "${nhModules}/programs/wofi"
    "${nhModules}/services/cliphist"
    "${nhModules}/services/kanshi"
    "${nhModules}/services/swaync"
    "${nhModules}/services/waybar"
  ];

  # Consistent cursor theme across all applications.
  home.pointerCursor = {
    gtk.enable = true;
    x11.enable = true;
    package = pkgs.yaru-theme;
    name = "Yaru";
    size = 24;
  };

  # Source hyprland config from the home-manager store
  xdg.configFile = {
    "hypr/hyprland.conf" = {
      source = ./hyprland.conf;
    };

    "hypr/hyprpaper.conf".text = ''
      splash = false
      preload = ${config.wallpaper}
      wallpaper = DP-1, ${config.wallpaper}
      wallpaper = eDP-1, ${config.wallpaper}
    '';

    "hypr/hypridle.conf".text = ''
      general {
        lock_cmd = pidof hyprlock || hyprlock
        before_sleep_cmd = loginctl lock-session
        after_sleep_cmd = hyprctl dispatch dpms on
      }
    '';

    "hypr/hyprlock.conf".text = ''
      background {
          monitor =
          path = ${config.wallpaper}
          blur_passes = 3
          contrast = 0.8916
          brightness = 0.8172
          vibrancy = 0.1696
          vibrancy_darkness = 0.0
      }

      general {
          grace = 0
          fail_timeout = 1000
      }

      # DP-1 Conifg
      input-field {
          monitor = DP-1
          size = 250, 60
          outline_thickness = 2
          dots_size = 0.2 # Scale of input-field height, 0.2 - 0.8
          dots_spacing = 0.2 # Scale of dots' absolute size, 0.0 - 1.0
          dots_center = true
          outer_color = rgba(0, 0, 0, 0)
          inner_color = rgba(0, 0, 0, 0.5)
          font_color = rgb(200, 200, 200)
          fade_on_empty = false
          capslock_color = -1
          placeholder_text = <i><span foreground="##e6e9ef">Password</span></i>
          fail_text = <i>$FAIL <b>($ATTEMPTS)</b></i>
          hide_input = false
          position = 0, -120
          halign = center
          valign = center
      }

      # Date
      label {
        monitor = DP-1
        text = cmd[update:1000] echo "<span>$(date '+%A, %d %B')</span>"
        color = rgba(255, 255, 255, 0.8)
        font_size = 15
        font_family = JetBrains Mono Nerd Font Mono ExtraBold
        position = 0, -400
        halign = center
        valign = top
      }

      # Time
      label {
          monitor = DP-1
          text = cmd[update:1000] echo "<span>$(date '+%H:%M')</span>"
          color = rgba(255, 255, 255, 0.8)
          font_size = 120
          font_family = JetBrains Mono Nerd Font Mono ExtraBold
          position = 0, -400
          halign = center
          valign = top
      }

      # Keyboard layout
      label {
        monitor = DP-1
        text = $LAYOUT
        color = rgba(255, 255, 255, 0.9)
        font_size = 10
        font_family = JetBrains Mono Nerd Font Mono
        position = 0, -175
        halign = center
        valign = center
      }

      # eDP-1 Conifg
      input-field {
          monitor = eDP-1
          size = 500, 120
          outline_thickness = 2
          dots_size = 0.2 # Scale of input-field height, 0.2 - 0.8
          dots_spacing = 0.2 # Scale of dots' absolute size, 0.0 - 1.0
          dots_center = true
          outer_color = rgba(0, 0, 0, 0)
          inner_color = rgba(0, 0, 0, 0.5)
          font_color = rgb(200, 200, 200)
          fade_on_empty = false
          capslock_color = -1
          placeholder_text = <i><span foreground="##e6e9ef">Password</span></i>
          fail_text = <i>$FAIL <b>($ATTEMPTS)</b></i>
          hide_input = false
          position = 0, -120
          halign = center
          valign = center
      }

      # Date
      label {
        monitor = eDP-1
        text = cmd[update:1000] echo "<span>$(date '+%A, %d %B')</span>"
        color = rgba(255, 255, 255, 0.8)
        font_size = 30
        font_family = JetBrains Mono Nerd Font Mono ExtraBold
        position = 0, -400
        halign = center
        valign = top
      }

      # Time
      label {
          monitor = eDP-1
          text = cmd[update:1000] echo "<span>$(date '+%H:%M')</span>"
          color = rgba(255, 255, 255, 0.8)
          font_size = 240
          font_family = JetBrains Mono Nerd Font Mono ExtraBold
          position = 0, -400
          halign = center
          valign = top
      }

      # Keyboard layout
      label {
        monitor = eDP-1
        text = $LAYOUT
        color = rgba(255, 255, 255, 0.9)
        font_size = 20
        font_family = JetBrains Mono Nerd Font Mono
        position = 0, -230
        halign = center
        valign = center
      }
    '';
  };

  dconf.settings = {
    "org/blueman/general" = {
      "plugin-list" = lib.mkForce ["!StatusNotifierItem"];
    };

    "org/blueman/plugins/powermanager" = {
      "auto-power-on" = true;
    };

    "org/gnome/calculator" = {
      "accuracy" = 9;
      "angle-units" = "degrees";
      "base" = 10;
      "button-mode" = "basic";
      "number-format" = "automatic";
      "show-thousands" = false;
      "show-zeroes" = false;
      "source-currency" = "";
      "source-units" = "degree";
      "target-currency" = "";
      "target-units" = "radian";
      "window-maximized" = false;
    };

    "org/gnome/desktop/interface" = {
      "color-scheme" = "prefer-dark";
      "cursor-theme" = "Yaru";
      "font-name" = "Roboto 11";
      "icon-theme" = "Tela-circle-dark";
    };

    "org/gnome/desktop/wm/preferences" = {
      "button-layout" = lib.mkForce "";
    };

    "org/gnome/nautilus/preferences" = {
      "default-folder-viewer" = "list-view";
      "migrated-gtk-settings" = true;
      "search-filter-time-type" = "last_modified";
      "search-view" = "list-view";
    };

    "org/gnome/nm-applet" = {
      "disable-connected-notifications" = true;
      "disable-vpn-notifications" = true;
    };

    "org/gtk/gtk4/settings/file-chooser" = {
      "show-hidden" = true;
    };

    "org/gtk/settings/file-chooser" = {
      "date-format" = "regular";
      "location-mode" = "path-bar";
      "show-hidden" = true;
      "show-size-column" = true;
      "show-type-column" = true;
      "sort-column" = "name";
      "sort-directories-first" = false;
      "sort-order" = "ascending";
      "type-format" = "category";
      "view-type" = "list";
    };
  };
}
</file>

<file path="modules/home-manager/misc/gtk/default.nix">
{
  userConfig,
  pkgs,
  ...
}: {
  # GTK theme configuration
  gtk = {
    enable = true;
    iconTheme = {
      name = "Tela-circle-dark";
      package = pkgs.tela-circle-icon-theme;
    };
    cursorTheme = {
      name = "Yaru";
      package = pkgs.yaru-theme;
      size = 24;
    };
    font = {
      name = "Roboto";
      size = 11;
    };
    gtk3 = {
      bookmarks = [
        "file:///home/${userConfig.name}/Documents"
        "file:///home/${userConfig.name}/Downloads"
        "file:///home/${userConfig.name}/Pictures"
        "file:///home/${userConfig.name}/Videos"
        "file:///home/${userConfig.name}/Downloads/temp"
        "file:///home/${userConfig.name}/Documents/repositories"
      ];
    };
  };

  # Enable catppuccin theming for GTK apps.
  catppuccin.gtk.enable = true;
}
</file>

<file path="modules/home-manager/misc/qt/default.nix">
{
  lib,
  pkgs,
  ...
}: {
  config = lib.mkIf (!pkgs.stdenv.isDarwin) {
    qt = {
      enable = true;
      platformTheme.name = "kvantum";
      style.name = "kvantum";
    };

    catppuccin.kvantum.enable = true;
    catppuccin.kvantum.apply = true;

    home.sessionVariables = {
      # use wayland as the default backend, fallback to xcb if wayland is not available
      QT_QPA_PLATFORM = "wayland;xcb";

      # remain backwards compatible with qt5
      DISABLE_QT5_COMPAT = "0";

      # tell calibre to use the dark theme
      CALIBRE_USE_DARK_PALETTE = "1";
    };
  };
}
</file>

<file path="modules/home-manager/misc/xdg/default.nix">
{...}: {
  xdg = {
    enable = true;
    mimeApps = {
      enable = true;
      associations.added = {
        "audio/mpeg" = ["org.gnome.Totem.desktop"];
        "image/jpeg" = ["org.gnome.Loupe.desktop"];
        "image/jpg" = ["org.gnome.Loupe.desktop"];
        "image/png" = ["org.gnome.Loupe.desktop"];
        "video/mp3" = ["org.gnome.Totem.desktop"];
        "video/mp4" = ["org.gnome.Totem.desktop"];
        "video/quicktime" = ["org.gnome.Totem.desktop"];
        "video/webm" = ["org.gnome.Totem.desktop"];
      };
      defaultApplications = {
        "application/json" = ["gnome-text-editor.desktop"];
        "application/toml" = "org.gnome.TextEditor.desktop";
        "application/x-gnome-saved-search" = ["org.gnome.Nautilus.desktop"];
        "audio/*" = ["org.gnome.Totem.desktop"];
        "audio/mp3" = ["org.gnome.Totem.desktop"];
        "image/*" = ["org.gnome.Loupe.desktop"];
        "image/jpg" = ["org.gnome.Loupe.desktop"];
        "image/png" = ["org.gnome.Loupe.desktop"];
        "text/plain" = "org.gnome.TextEditor.desktop";
        "video/*" = ["org.gnome.Totem.desktop"];
        "video/mp4" = ["org.gnome.Totem.desktop"];
      };
    };
    userDirs = {
      enable = true;
      createDirectories = true;
    };
  };
}
</file>

<file path="modules/home-manager/programs/aerospace/default.nix">
{
  lib,
  pkgs,
  ...
}: {
  config = lib.mkIf (pkgs.stdenv.isDarwin) {
    # Ensure aerospace package installed
    home.packages = with pkgs; [
      aerospace
    ];

    # Source aerospace config from the home-manager store
    home.file.".aerospace.toml".text = ''
      # Start AeroSpace at login
      start-at-login = true

      # Normalization settings
      enable-normalization-flatten-containers = true
      enable-normalization-opposite-orientation-for-nested-containers = true

      # Accordion layout settings
      accordion-padding = 30

      # Default root container settings
      default-root-container-layout = 'tiles'
      default-root-container-orientation = 'auto'

      # Mouse follows focus settings
      on-focused-monitor-changed = ['move-mouse monitor-lazy-center']
      on-focus-changed = ['move-mouse window-lazy-center']

      # Automatically unhide macOS hidden apps
      automatically-unhide-macos-hidden-apps = true

      # Key mapping preset
      [key-mapping]
      preset = 'qwerty'

      # Gaps settings
      [gaps]
      inner.horizontal = 6
      inner.vertical =   6
      outer.left =       6
      outer.bottom =     6
      outer.top =        6
      outer.right =      6

      # Main mode bindings
      [mode.main.binding]
      # Launch applications
      alt-shift-enter = 'exec-and-forget open -na alacritty'
      alt-shift-b = 'exec-and-forget open -a "Brave Browser"'
      alt-shift-t = 'exec-and-forget open -a "Telegram"'
      alt-shift-f = 'exec-and-forget open -a Finder'

      # Window management
      alt-q = "close"
      alt-slash = 'layout tiles horizontal vertical'
      alt-comma = 'layout accordion horizontal vertical'
      alt-m = 'fullscreen'

      # Focus movement
      alt-h = 'focus left'
      alt-j = 'focus down'
      alt-k = 'focus up'
      alt-l = 'focus right'

      # Window movement
      alt-shift-h = 'move left'
      alt-shift-j = 'move down'
      alt-shift-k = 'move up'
      alt-shift-l = 'move right'

      # Resize windows
      alt-shift-minus = 'resize smart -50'
      alt-shift-equal = 'resize smart +50'

      # Workspace management
      alt-1 = 'workspace 1'
      alt-2 = 'workspace 2'
      alt-3 = 'workspace 3'
      alt-4 = 'workspace 4'
      alt-5 = 'workspace 5'
      alt-6 = 'workspace 6'
      alt-7 = 'workspace 7'
      alt-8 = 'workspace 8'
      alt-9 = 'workspace 9'

      # Move windows to workspaces
      alt-shift-1 = 'move-node-to-workspace 1'
      alt-shift-2 = 'move-node-to-workspace 2'
      alt-shift-3 = 'move-node-to-workspace 3'
      alt-shift-4 = 'move-node-to-workspace 4'
      alt-shift-5 = 'move-node-to-workspace 5'
      alt-shift-6 = 'move-node-to-workspace 6'
      alt-shift-7 = 'move-node-to-workspace 7'
      alt-shift-8 = 'move-node-to-workspace 8'
      alt-shift-9 = 'move-node-to-workspace 9'

      # Workspace navigation
      alt-tab = 'workspace-back-and-forth'
      alt-shift-tab = 'move-workspace-to-monitor --wrap-around next'

      # Enter service mode
      alt-shift-semicolon = 'mode service'

      # Service mode bindings
      [mode.service.binding]
      # Reload config and exit service mode
      esc = ['reload-config', 'mode main']

      # Reset layout
      r = ['flatten-workspace-tree', 'mode main']

      # Toggle floating/tiling layout
      f = ['layout floating tiling', 'mode main']

      # Close all windows but current
      backspace = ['close-all-windows-but-current', 'mode main']

      # Join with adjacent windows
      alt-shift-h = ['join-with left', 'mode main']
      alt-shift-j = ['join-with down', 'mode main']
      alt-shift-k = ['join-with up', 'mode main']
      alt-shift-l = ['join-with right', 'mode main']

      # Window detection rules
      [[on-window-detected]]
      if.app-id = 'com.brave.Browser'
      run = 'move-node-to-workspace 1'

      [[on-window-detected]]
      if.app-id = 'org.alacritty'
      run = 'move-node-to-workspace 2'

      [[on-window-detected]]
      if.app-id = 'com.tdesktop.Telegram'
      run = 'move-node-to-workspace 3'

      [[on-window-detected]]
      if.app-id = 'com.obsproject.obs-studio'
      run = 'move-node-to-workspace 4'

      [[on-window-detected]]
      if.app-id = 'us.zoom.xos'
      run = 'move-node-to-workspace 5'
    '';
  };
}
</file>

<file path="modules/home-manager/programs/brave/default.nix">
{
  pkgs,
  lib,
  ...
}: {
  # Ensure Brave browser package installed
  home.packages = with pkgs; [
    brave
  ];

  # Apply XDG configuration only on non-Darwin platforms
  xdg = lib.mkIf (!pkgs.stdenv.isDarwin) {
    mimeApps = {
      defaultApplications = {
        "application/x-extension-htm" = "brave-browser.desktop";
        "application/x-extension-html" = "brave-browser.desktop";
        "application/x-extension-shtml" = "brave-browser.desktop";
        "application/x-extension-xht" = "brave-browser.desktop";
        "application/x-extension-xhtml" = "brave-browser.desktop";
        "application/xhtml+xml" = "brave-browser.desktop";
        "text/html" = "brave-browser.desktop";
        "x-scheme-handler/about" = "brave-browser.desktop";
        "x-scheme-handler/chrome" = ["chromium-browser.desktop"];
        "x-scheme-handler/ftp" = "brave-browser.desktop";
        "x-scheme-handler/http" = "brave-browser.desktop";
        "x-scheme-handler/https" = "brave-browser.desktop";
        "x-scheme-handler/unknown" = "brave-browser.desktop";
        "application/pdf" = "brave-browser.desktop";
      };
    };
  };
}
</file>

<file path="modules/home-manager/programs/fzf/default.nix">
{pkgs, ...}: let
  copyCmd =
    if pkgs.stdenv.isDarwin
    then "pbcopy"
    else "wl-copy";
in {
  # Install fzf via home-manager module
  programs.fzf = {
    enable = true;

    defaultCommand = "find .";
    defaultOptions = [
      "--bind '?:toggle-preview'"
      "--bind 'ctrl-a:select-all'"
      "--bind 'ctrl-e:execute(echo {+} | xargs -o nvim)'"
      "--bind 'ctrl-y:execute-silent(echo {+} | ${copyCmd})'"
      "--color='hl:148,hl+:154,pointer:032,marker:010,bg+:237,gutter:008'"
      "--height=40%"
      "--info=inline"
      "--layout=reverse"
      "--multi"
      "--preview '([[ -f {}  ]] && (bat --color=always --style=numbers,changes {} || cat {})) || ([[ -d {}  ]] && (tree -C {} | less)) || echo {} 2> /dev/null | head -200'"
      "--preview-window=:hidden"
      "--prompt='~ ' --pointer='▶' --marker='✓'"
    ];
  };
}
</file>

<file path="modules/home-manager/programs/neovim/lazyvim/lua/config/keymaps.lua">
-- Keymaps are automatically loaded on the VeryLazy event
-- Default keymaps that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/keymaps.lua
-- Add any additional keymaps here

vim.keymap.set("v", "p", '"_dP', { desc = "Paste without overwriting the default register" })
vim.keymap.set("n", "<leader>dt", "<cmd>diffthis<CR>", { desc = "Diff This" })
</file>

<file path="modules/home-manager/programs/neovim/lazyvim/lua/plugins/helm-ls.lua">
return {
  { "towolf/vim-helm", ft = "helm" },
}
</file>

<file path="modules/home-manager/programs/starship/default.nix">
{...}: {
  # Starship configuration
  programs.starship = {
    enable = true;
    enableZshIntegration = true;
    settings = {
      add_newline = false;
      directory = {
        style = "bold lavender";
      };
      aws = {
        disabled = true;
      };
      docker_context = {
        symbol = " ";
      };
      golang = {
        symbol = " ";
      };
      kubernetes = {
        disabled = false;
        style = "bold pink";
        symbol = "󱃾 ";
        format = "[$symbol$context( \($namespace\))]($style)";
        contexts = [
          {
            context_pattern = "arn:aws:eks:(?P<var_region>.*):(?P<var_account>[0-9]{12}):cluster/(?P<var_cluster>.*)";
            context_alias = "$var_cluster";
          }
        ];
      };
      helm = {
        symbol = " ";
      };
      gradle = {
        symbol = " ";
      };
      java = {
        symbol = " ";
      };
      kotlin = {
        symbol = " ";
      };
      lua = {
        symbol = " ";
      };
      package = {
        symbol = " ";
      };
      php = {
        symbol = " ";
      };
      python = {
        symbol = " ";
      };
      rust = {
        symbol = " ";
      };
      terraform = {
        symbol = " ";
      };
      right_format = "$kubernetes";
    };
  };

  # Enable catppuccin theming for starship.
  catppuccin.starship.enable = true;
}
</file>

<file path="modules/home-manager/programs/ulauncher/config/icons/icon.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="black" width="48px" height="48px"><path d="M0 0h24v24H0z" fill="none"/><path d="M13 3h-2v10h2V3zm4.83 2.17l-1.42 1.42C17.99 7.86 19 9.81 19 12c0 3.87-3.13 7-7 7s-7-3.13-7-7c0-2.19 1.01-4.14 2.58-5.42L6.17 5.17C4.23 6.82 3 9.26 3 12c0 4.97 4.03 9 9 9s9-4.03 9-9c0-2.74-1.23-5.18-3.17-6.83z"/></svg>
</file>

<file path="modules/home-manager/programs/ulauncher/config/user-themes/Catppuccin-Macchiato-Lavender/manifest.json">
{
  "manifest_version": "1",
  "name": "Catppuccin-Macchiato-Lavender",
  "display_name": "Catppuccin Macchiato Lavender",
  "extend_theme": "light",
  "css_file": "theme.css",
  "css_file_gtk_3.20+": "theme-gtk-3.20.css",
  "matched_text_hl_colors": {
    "when_selected": "#b7bdf8",
    "when_not_selected": "#b7bdf8"
  }
}
</file>

<file path="modules/home-manager/programs/ulauncher/config/user-themes/Catppuccin-Macchiato-Lavender/theme-gtk-3.20.css">
@import url("theme.css");
.input {
    caret-color: #b7bdf8;
}
/* workaround for a bug in GTK+ < 3.20 */
.selected.item-box {
    border: none;
}
</file>

<file path="modules/home-manager/programs/ulauncher/config/user-themes/Catppuccin-Macchiato-Lavender/theme.css">
/*Catpuccin colors*/
@define-color backgroundColor #24273a;
@define-color accentColor #b7bdf8;
@define-color textColor #cad3f5;
@define-color subTextColor #b8c0e0;
.app {
    background-color: @backgroundColor;
    border-color: @accentColor;
    border-radius: 8px;
}
.input {
    color: @accentColor;
}
.input *:selected,
.input *:focus,
*:selected:focus {
    background-color: alpha (@accentColor, 0.4);
    color: @textColor;
}
.item-text {
    color: @textColor;
}
.item-name {
    color: @textColor;
    font-size: 1.2rem;
}
.selected.item-box {
    background-color: alpha (@accentColor, 0.3);
    border-radius: 8px;
}
.selected.item-box .item-text {
    color: @textColor;
}
.selected.item-box .item-name {
    color: @textColor;
    font-size: 1.2rem;
}
.item-shortcut {
    color: @accentColor;
}
.selected.item-box .item-shortcut {
    color: @accentColor;
    font-size: 1.1rem;
}
.selected.item-box{
    color: @accentColor;
}
.prefs-btn {
    opacity: 1;
}
.prefs-btn:hover {
    background-color: alpha (@accentColor, 1.0);
}
</file>

<file path="modules/home-manager/programs/ulauncher/config/extensions.json">
{
    "com.github.nortmas.chrome-bookmarks": {
        "id": "com.github.nortmas.chrome-bookmarks",
        "url": "https://github.com/nortmas/chrome-bookmarks",
        "updated_at": "2025-05-22T09:13:39.079659",
        "last_commit": "b4598ea1e208cd6feb49574e998721dcc771157f",
        "last_commit_time": "2021-01-09T15:04:28"
    }
}
</file>

<file path="modules/home-manager/programs/ulauncher/config/settings.json">
{
    "blacklisted-desktop-dirs": "/usr/share/locale:/usr/share/app-install:/usr/share/kservices5:/usr/share/fk5:/usr/share/kservicetypes5:/usr/share/applications/screensavers:/usr/share/kde4:/usr/share/mimelnk",
    "clear-previous-query": true,
    "disable-desktop-filters": true,
    "grab-mouse-pointer": true,
    "hotkey-show-app": "<Primary>space",
    "render-on-screen": "mouse-pointer-monitor",
    "show-indicator-icon": false,
    "show-recent-apps": "0",
    "terminal-command": "",
    "theme-name": "Catppuccin-Macchiato-Lavender"
}
</file>

<file path="modules/home-manager/scripts/bin/hyprshot">
#!/usr/bin/env bash

set -e

function Help() {
	cat <<EOF
Usage: hyprshot [options ..] [-m [mode] ..] -- [command]

Hyprshot is an utility to easily take screenshot in Hyprland using your mouse.

It allows taking screenshots of windows, regions and monitors which are saved to a folder of your choosing and copied to your clipboard.

Examples:
  capture a window                      \`hyprshot -m window\`
  capture active window to clipboard    \`hyprshot -m window -m active --clipboard-only\`
  capture selected monitor              \`hyprshot -m output -m DP-1\`

Options:
  -h, --help                show help message
  -m, --mode                one of: output, window, region, active, OUTPUT_NAME
  -o, --output-folder       directory in which to save screenshot
  -f, --filename            the file name of the resulting screenshot
  -D, --delay               how long to delay taking the screenshot after selection (seconds)
  -z, --freeze              freeze the screen on initialization
  -d, --debug               print debug information
  -s, --silent              don't send notification when screenshot is saved
  -r, --raw                 output raw image data to stdout
  -t, --notif-timeout       notification timeout in milliseconds (default 5000)
  --clipboard-only          copy screenshot to clipboard and don't save image in disk
  -- [command]              open screenshot with a command of your choosing. e.g. hyprshot -m window -- mirage

Modes:
  output        take screenshot of an entire monitor
  window        take screenshot of an open window
  region        take screenshot of selected region
  active        take screenshot of active window|output
                (you must use --mode again with the intended selection)
  OUTPUT_NAME   take screenshot of output with OUTPUT_NAME
                (you must use --mode again with the intended selection)
                (you can get this from \`hyprctl monitors\`)
EOF
}

function Print() {
	if [ $DEBUG -eq 0 ]; then
		return 0
	fi
	local fmt="$1"
	shift
	# shellcheck disable=SC2059 # $fmt is intentionally the format string
	1>&2 printf "$fmt" "$@"
}

function send_notification() {
	if [ $SILENT -eq 1 ]; then
		return 0
	fi

	local message
	if [ $CLIPBOARD -eq 1 ]; then
		message="Image copied to the clipboard"
	else
		message="Image saved in <i>${1}</i> and copied to the clipboard."
	fi
	notify-send "Screenshot saved" \
		"${message}" \
		-t "$NOTIF_TIMEOUT" -i "${1}" -a Hyprshot
}

function trim() {
	Print "Geometry: %s\n" "${1}"
	local geometry="${1}"
	local xy_str wh_str x y width height
	local max_width max_height min_x min_y
	local cropped_x cropped_y cropped_width cropped_height
	local cropped

	xy_str=$(echo "${geometry}" | cut -d' ' -f1)
	wh_str=$(echo "${geometry}" | cut -d' ' -f2)
	x=$(echo "${xy_str}" | cut -d',' -f1)
	y=$(echo "${xy_str}" | cut -d',' -f2)
	width=$(echo "${wh_str}" | cut -dx -f1)
	height=$(echo "${wh_str}" | cut -dx -f2)

	max_width=$(hyprctl monitors -j | jq -r '[.[] | if (.transform % 2 == 0) then (.x + .width) else (.x + .height) end] | max')
	max_height=$(hyprctl monitors -j | jq -r '[.[] | if (.transform % 2 == 0) then (.y + .height) else (.y + .width) end] | max')

	min_x=$(hyprctl monitors -j | jq -r '[.[] | (.x)] | min')
	min_y=$(hyprctl monitors -j | jq -r '[.[] | (.y)] | min')

	cropped_x=$x
	cropped_y=$y
	cropped_width=$width
	cropped_height=$height

	if ((x + width > max_width)); then
		cropped_width=$((max_width - x))
	fi
	if ((y + height > max_height)); then
		cropped_height=$((max_height - y))
	fi

	if ((x < min_x)); then
		cropped_x="$min_x"
		cropped_width=$((cropped_width + x - min_x))
	fi
	if ((y < min_y)); then
		cropped_y="$min_y"
		cropped_height=$((cropped_height + y - min_y))
	fi

	cropped=$(printf "%s,%s %sx%s" \
		"${cropped_x}" "${cropped_y}" \
		"${cropped_width}" "${cropped_height}")
	Print "Crop: %s\n" "${cropped}"
	echo "${cropped}"
}

function save_geometry() {
	local geometry="${1}"
	local output=""

	if [ $RAW -eq 1 ]; then
		grim -g "${geometry}" -
		return 0
	fi

	if [ $CLIPBOARD -eq 0 ]; then
		mkdir -p "$SAVEDIR"
		grim -g "${geometry}" "$SAVE_FULLPATH"
		output="$SAVE_FULLPATH"
		wl-copy --type image/png <"$output"
		if [ ${#COMMAND_ARGS[@]} -gt 0 ]; then
			"${COMMAND_ARGS[@]}" "$output"
		fi
	else
		wl-copy --type image/png < <(grim -g "${geometry}" -)
	fi

	send_notification "$output"
}

function checkRunning() {
	sleep 1
	while true; do
		if [[ $(pgrep slurp | wc -m) == 0 ]]; then
			pkill hyprpicker
			exit
		fi
		sleep 0.1
	done
}

function begin_grab() {
	if [ $FREEZE -eq 1 ] && [ "$(command -v "hyprpicker")" ] >/dev/null 2>&1; then
		hyprpicker -r -z &
		sleep 0.2
	fi
	local option="$1"
	local geometry

	case "$option" in
	output)
		if [ $CURRENT -eq 1 ]; then
			geometry=$(grab_active_output)
		elif [ -z "$SELECTED_MONITOR" ]; then
			geometry=$(grab_output)
		else
			geometry=$(grab_selected_output "$SELECTED_MONITOR")
		fi
		;;
	region)
		geometry=$(grab_region)
		;;
	window)
		if [ $CURRENT -eq 1 ]; then
			geometry=$(grab_active_window)
		else
			geometry=$(grab_window)
		fi
		local trimmed_geometry
		trimmed_geometry=$(trim "${geometry}")
		geometry="$trimmed_geometry"
		;;
	esac
	if [ "${DELAY:-0}" -gt 0 ]; then
		sleep "${DELAY}"
	fi
	save_geometry "${geometry}"
}

function grab_output() {
	slurp -or
}

function grab_active_output() {
	local active_workspace monitors current_monitor active_ws_id
	active_workspace=$(hyprctl -j activeworkspace)
	monitors=$(hyprctl -j monitors)
	Print "Monitors: %s\n" "$monitors"
	Print "Active workspace: %s\n" "$active_workspace"

	active_ws_id=$(echo "$active_workspace" | jq -r '.id')
	current_monitor=$(echo "$monitors" | jq -r --argjson id "$active_ws_id" 'first(.[] | select(.activeWorkspace.id == $id))')

	Print "Current output: %s\n" "$current_monitor"
	echo "$current_monitor" | jq -r '"\(.x),\(.y) \(.width/.scale|round)x\(.height/.scale|round)"'
}

function grab_selected_output() {
	local monitor_name="$1"
	local monitor
	Print "Capturing: %s\n" "${monitor_name}"
	monitor=$(hyprctl -j monitors | jq -r --arg name "$monitor_name" '.[] | select(.name == $name)')
	echo "$monitor" | jq -r '"\(.x),\(.y) \(.width/.scale|round)x\(.height/.scale|round)"'
}

function grab_region() {
	slurp -d
}

function grab_window() {
	local monitors clients boxes active_ws_ids_json
	monitors=$(hyprctl -j monitors)

	active_ws_ids_json=$(echo "$monitors" | jq -r 'map(.activeWorkspace.id)')
	clients=$(hyprctl -j clients | jq -r --argjson ids "$active_ws_ids_json" '[.[] | select(.workspace.id as $wsid | $ids | index($wsid))]')

	Print "Monitors: %s\n" "$monitors"
	Print "Clients: %s\n" "$clients"
	boxes="$(echo "$clients" | jq -r '.[] | "\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1]) \(.title)"' | cut -f1,2 -d' ')"
	Print "Boxes:\n%s\n" "$boxes"
	slurp -r <<<"$boxes"
}

function grab_active_window() {
	local active_window box
	active_window=$(hyprctl -j activewindow)
	box=$(echo "$active_window" | jq -r '"\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"' | cut -f1,2 -d' ')
	Print "Box:\n%s\n" "$box"
	echo "$box"
}

function parse_mode() {
	local mode_arg="$1"

	case "$mode_arg" in
	window | region | output)
		OPTION="$mode_arg"
		;;
	active)
		CURRENT=1
		;;
	*)
		if hyprctl monitors -j | jq -re --arg name "$mode_arg" '.[] | select(.name == $name)' &>/dev/null; then
			SELECTED_MONITOR="$mode_arg"
		else
			Print "Error: Unknown mode or output name: %s\n" "$mode_arg"
			exit 3
		fi
		;;
	esac
}

COMMAND_ARGS=()

function args() {
	local options
	options=$(getopt -o hf:o:m:D:dszr:t: --long help,filename:,output-folder:,mode:,delay:,clipboard-only,debug,silent,freeze,raw,notif-timeout: -- "$@")
	eval set -- "$options"

	while true; do
		case "$1" in
		-h | --help)
			Help
			exit
			;;
		-o | --output-folder)
			shift
			SAVEDIR="$1"
			;;
		-f | --filename)
			shift
			FILENAME="$1"
			;;
		-D | --delay)
			shift
			DELAY="$1"
			;;
		-m | --mode)
			shift
			parse_mode "$1"
			;;
		--clipboard-only)
			CLIPBOARD=1
			;;
		-d | --debug)
			DEBUG=1
			;;
		-z | --freeze)
			FREEZE=1
			;;
		-s | --silent)
			SILENT=1
			;;
		-r | --raw)
			RAW=1
			;;
		-t | --notif-timeout)
			shift
			NOTIF_TIMEOUT="$1"
			;;
		--)
			shift
			COMMAND_ARGS=("$@")
			break
			;;
		esac
		shift
	done

	if [ -z "$OPTION" ]; then
		Print "A mode is required\n\nAvailable modes are:\n\toutput\n\tregion\n\twindow\n"
		exit 2
	fi
}

if [ -z "$1" ]; then
	Help
	exit
fi

CLIPBOARD=0
DEBUG=0
SILENT=0
RAW=0
NOTIF_TIMEOUT=5000
CURRENT=0
FREEZE=0
if [ -z "$XDG_PICTURES_DIR" ] && type xdg-user-dir &>/dev/null; then
	XDG_PICTURES_DIR=$(xdg-user-dir PICTURES)
fi
FILENAME="$(date +'%Y-%m-%d-%H%M%S_hyprshot.png')"
if [ -z "$HYPRSHOT_DIR" ]; then
	SAVEDIR="${XDG_PICTURES_DIR:-$HOME/Pictures}"
else
	SAVEDIR="${HYPRSHOT_DIR}"
fi

args "$0" "$@"

SAVE_FULLPATH="$SAVEDIR/$FILENAME"
[ $CLIPBOARD -eq 0 ] && Print "Saving in: %s\n" "$SAVE_FULLPATH"
begin_grab "$OPTION" &
checkRunning
</file>

<file path="modules/home-manager/scripts/bin/konfig-updater">
#!/usr/bin/env python3
"""
This script is designed to lists AWS EKS clusters and updates the kubeconfig file for each found cluster.
It is particularly useful for administrators who manage multiple AWS accounts with EKS clusters
in different regions, allowing them to quickly switch contexts and manage these clusters.

Features:
- Account Retrieval: Parses the AWS configuration file to fetch a list of AWS profiles (accounts).
- Cluster Listing: For each account and predefined region, lists all EKS clusters using the AWS CLI.
- Kubeconfig Update: Updates the kubeconfig file for each discovered cluster, facilitating
  Kubernetes cluster management.
- Region Support: Currently supports 'eu-west-1' and 'eu-central-1' regions.


Dependencies:
- AWS CLI: For interacting with AWS EKS and managing configurations.
- jq: Command-line JSON processor used for parsing AWS CLI output.
- Python 3 and standard libraries: configparser, os, shutil, subprocess.

Usage:
The script is executed as a standalone Python script. It automatically iterates over the predefined 
accounts and regions, performing actions without needing additional user input.
"""

__author__ = "Alexander Nabokikh"
__license__ = "GPL-2.0 license"


import configparser
import os
import shutil
import subprocess

regions = ["eu-west-1", "eu-central-1"]


def check_dependencies():
    """Check if required dependencies are available."""

    if not shutil.which("aws"):
        print("Error: AWS provider not found")
        exit(-1)


def get_accounts():
    """Get the list of accounts by parsing the ~/.aws/config file."""
    config_file_path = os.path.expanduser("~/.aws/config")

    if not os.path.exists(config_file_path):
        print("Error: AWS config file not found")
        exit(-1)

    config_parser = configparser.ConfigParser()

    config_parser.read(config_file_path)

    accounts = []
    for section in config_parser.sections():
        if section.startswith("profile "):
            profile_name = section.split(" ", 1)[1]
            accounts.append(profile_name)

    if not accounts:
        print("Error: No AWS profiles found")
        exit(-1)

    return accounts


def list_clusters(account, region):
    """List clusters in the given account and region."""
    clusters_process = subprocess.run(
        ["aws", "eks", "list-clusters", "--region", region, "--profile", account], capture_output=True, text=True
    )
    if clusters_process.returncode != 0:
        print(f"Error: Failed to list clusters on {account} {region}")
        return []
    return subprocess.run(
        ["jq", "-r", ".clusters | .[]"], input=clusters_process.stdout, capture_output=True, text=True
    ).stdout.splitlines()


def main():
    """Main function."""
    try:
        check_dependencies()

        accounts = get_accounts()

        for account in accounts:
            for region in regions:
                print(f"Switching for {account} {region}")

                clusters = list_clusters(account, region)

                if not clusters:
                    print(f"No clusters found on {account} {region}")
                    continue

                print(f"Found Clusters on {account} {region}:")
                print("\n".join(clusters))

                for cluster in clusters:
                    subprocess.run(
                        ["aws", "eks", "update-kubeconfig", "--name", cluster, "--region", region, "--profile", account]
                    )

    except KeyboardInterrupt:
        print("\nScript interrupted by the user. Exiting.")


if __name__ == "__main__":
    main()
</file>

<file path="modules/home-manager/scripts/bin/ks">
#!/usr/bin/env python3
"""
The script is designed to run in environments where Kubernetes clusters are managed through AWS
and access is controlled via SAML authentication. It automates the process of logging into the
appropriate AWS account and setting up the shell environment for further interactions with AWS services.

Key functionalities include:
- Checking if 'saml2aws' and 'kubectl' are installed on the system.
- Executes 'kubectl ctx' to switch to specific kubernets context.
- Retrieving the current Kubernetes context and extracting the associated AWS account number.
- Parsing the AWS configuration file to find the relevant profile.
- Finding the correct profile name by matching the account number in the AWS configuration.
- Executing the 'saml2aws' command with the identified profile to set up the shell environment.

Dependencies:
- saml2aws: A tool for logging into an AWS account.
- kubectl: A command-line tool for interacting with Kubernetes clusters.
- Python 3 and standard libraries: configparser, os, re, subprocess.

Usage:
The script is executed as a standalone Python script. It does not take any command-line arguments
and relies on the correct configuration of the AWS and Kubernetes environments on the user's system.

"""

__author__ = "Alexander Nabokikh"
__license__ = "GPL-2.0 license"


import configparser
import os
import re
import subprocess


def check_dependencies():
    """
    Check if required command-line tools are installed.
    """
    try:
        for command in ["saml2aws", "kubectl"]:
            subprocess.run([command, "help"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except FileNotFoundError:
        print(f"Error: The command '{command}' is not found. Please install it before proceeding.")
        exit(1)


def select_context():
    """Run kubectl ctx to choose context"""
    try:
        subprocess.run(["kubectl", "ctx"])

    except subprocess.CalledProcessError as e:
        print(f"Error: kubectl ctx failed with an erro: {e}")
        exit(-1)


def get_kube_context():
    """Get the current Kubernetes context and extract the account number."""
    try:
        kube_context = subprocess.check_output(["kubectl", "config", "current-context"]).decode().strip()
        print(f"Current Kubernetes context: {kube_context}")

        match = re.search(r"arn:aws:eks:([\w-]+):(\d+):cluster/([\w-]+)", kube_context)
        if match:
            account_number = match.group(2)
            print(f"Account Number: {account_number}")
            return account_number
        else:
            raise ValueError("Invalid Kubernetes context ARN")
    except subprocess.CalledProcessError as e:
        print(f"Error in getting Kubernetes context: {e}")
        exit(-1)


def parse_aws_config():
    """Parse AWS config file."""
    aws_config_path = os.path.expanduser("~/.aws/config")
    if not os.path.exists(aws_config_path):
        print("AWS config file not found")
        exit(-1)

    config = configparser.ConfigParser()
    config.read(aws_config_path)
    return config


def find_profile_name(config, account_number):
    """Find the profile name by matching the account number."""
    for section in config.sections():
        if "role_arn" in config[section] and account_number in config[section]["role_arn"]:
            return section.replace("profile ", "")
    return None


def execute_saml2aws_command(profile_name):
    """Execute the saml2aws command with the found values."""
    shell = os.getenv("SHELL", "/bin/zsh")

    try:
        subprocess.run(["saml2aws", "exec", "--exec-profile", profile_name, shell], check=True)
    except subprocess.CalledProcessError:
        print("Existing credentials failed, attempting new login")
        subprocess.run(["saml2aws", "login", "--skip-prompt"], check=True)
        subprocess.run(["saml2aws", "exec", "--exec-profile", profile_name, shell], check=True)


def main():
    """Main function."""
    check_dependencies()
    select_context()
    account_number = get_kube_context()
    aws_config = parse_aws_config()
    profile_name = find_profile_name(aws_config, account_number)

    if profile_name:
        print(f"Profile Name: {profile_name}")
        execute_saml2aws_command(profile_name)
    else:
        print("Profile not found for the account number")
        exit(-1)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nOperation cancelled by the user. Exiting...")
        exit(1)
</file>

<file path="modules/home-manager/services/easyeffects/default.nix">
{
  lib,
  pkgs,
  ...
}: {
  config = lib.mkIf (!pkgs.stdenv.isDarwin) {
    # Install easyeffects via home-manager module
    services.easyeffects = {
      enable = true;
      preset = "mic";
    };

    # Source easyeffects preset from the home-manager store
    xdg.configFile = {
      "easyeffects/input/mic.json".text = ''
        {
          "input": {
            "blocklist": [],
            "compressor#0": {
              "attack": 2.0,
              "boost-amount": 6.0,
              "boost-threshold": -72.0,
              "bypass": false,
              "dry": -100.0,
              "hpf-frequency": 10.0,
              "hpf-mode": "off",
              "input-gain": 9.0,
              "knee": -6.0,
              "lpf-frequency": 20000.0,
              "lpf-mode": "off",
              "makeup": 0.0,
              "mode": "Downward",
              "output-gain": 0.0,
              "ratio": 4.0,
              "release": 200.0,
              "release-threshold": -40.0,
              "sidechain": {
                "lookahead": 0.0,
                "mode": "RMS",
                "preamp": 0.0,
                "reactivity": 10.0,
                "source": "Middle",
                "stereo-split-source": "Left/Right",
                "type": "Feed-forward"
              },
              "stereo-split": false,
              "threshold": -16.0,
              "wet": 0.0
            },
            "limiter#0": {
              "alr": false,
              "alr-attack": 5.0,
              "alr-knee": 0.0,
              "alr-release": 50.0,
              "attack": 1.0,
              "bypass": false,
              "dithering": "16bit",
              "external-sidechain": false,
              "gain-boost": false,
              "input-gain": 0.0,
              "lookahead": 5.0,
              "mode": "Herm Wide",
              "output-gain": 0.0,
              "oversampling": "Half x2(2L)",
              "release": 20.0,
              "sidechain-preamp": 0.0,
              "stereo-link": 100.0,
              "threshold": -3.0
            },
            "plugins_order": [
              "rnnoise#0",
              "compressor#0",
              "limiter#0"
            ],
            "rnnoise#0": {
              "bypass": false,
              "enable-vad": true,
              "input-gain": 0.0,
              "model-path": "",
              "output-gain": 0.0,
              "release": 20.0,
              "vad-thres": 50.0,
              "wet": 0.0
            }
          }
        }
      '';
    };
  };
}
</file>

<file path="modules/home-manager/services/kanshi/default.nix">
{...}: {
  # Manage kanshi services via Home-manager
  services.kanshi = {
    enable = true;
    systemdTarget = "graphical-session.target";
    settings = [
      {
        profile.name = "docked";
        profile.outputs = [
          {
            criteria = "DP-1";
            status = "enable";
            position = "0,0";
          }
          {
            criteria = "eDP-1";
            status = "disable";
          }
        ];
      }
      {
        profile.name = "undocked";
        profile.outputs = [
          {
            criteria = "eDP-1";
            status = "enable";
            position = "0,0";
          }
        ];
      }
    ];
  };
}
</file>

<file path="modules/nixos/services/tlp/default.nix">
{...}: {
  # Set TLP power profile
  services = {
    tlp = {
      enable = true;
      settings = {
        CPU_SCALING_GOVERNOR_ON_AC = "schedutil";
        CPU_SCALING_GOVERNOR_ON_BAT = "schedutil";

        CPU_ENERGY_PERF_POLICY_ON_AC = "balance_power";
        CPU_ENERGY_PERF_POLICY_ON_BAT = "balance_power";

        PLATFORM_PROFILE_ON_AC = "low-power";
        PLATFORM_PROFILE_ON_BAT = "low-power";

        USB_EXCLUDE_BTUSB = 1;

        RADEON_DPM_PERF_LEVEL_ON_AC = "auto";
        RADEON_DPM_PERF_LEVEL_ON_BAT = "auto";

        DISK_IOSCHED = ["none"];

        # Battery charge thresholds for on-road usage
        START_CHARGE_THRESH_BAT0 = 85;
        STOP_CHARGE_THRESH_BAT0 = 90;
      };
    };
    power-profiles-daemon = {
      enable = false;
    };
  };

  # Disable fingerprint reader
  services.fprintd.enable = false;
}
</file>

<file path=".gitignore">
files/configs/nvim/lazy-lock.json
files/configs/nvim/lazyvim.json
.DS_Store
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2025 Alexander Nabokikh

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="Makefile">
# Variables (override these as needed)
HOSTNAME ?= $(shell hostname)
FLAKE ?= .#$(HOSTNAME)
HOME_TARGET ?= $(FLAKE)
EXPERIMENTAL ?= --extra-experimental-features "nix-command flakes"

.PHONY: help install-nix install-nix-darwin darwin-rebuild nixos-rebuild \
	home-manager-switch nix-gc flake-update flake-check bootstrap-mac

help:
	@echo "Available targets:"
	@echo "  install-nix          - Install the Nix package manager"
	@echo "  install-nix-darwin   - Install nix-darwin using flake $(FLAKE)"
	@echo "  darwin-rebuild       - Rebuild the nix-darwin configuration"
	@echo "  nixos-rebuild        - Rebuild the NixOS configuration"
	@echo "  home-manager-switch  - Switch the Home Manager configuration using flake $(HOME_TARGET)"
	@echo "  nix-gc               - Run Nix garbage collection"
	@echo "  flake-update         - Update flake inputs"
	@echo "  flake-check          - Check the flake for issues"
	@echo "  bootstrap-mac        - Install Nix and nix-darwin sequentially"

install-nix:
	@echo "Installing Nix..."
	@sudo curl -L https://nixos.org/nix/install | sh -s -- --daemon --yes
	@echo "Nix installation complete."

install-nix-darwin:
	@echo "Installing nix-darwin..."
	@nix run nix-darwin $(EXPERIMENTAL) -- switch --flake $(FLAKE)
	@echo "nix-darwin installation complete."

darwin-rebuild:
	@echo "Rebuilding darwin configuration..."
	@sudo darwin-rebuild switch --flake $(FLAKE)
	@echo "Darwin rebuild complete."

nixos-rebuild:
	@echo "Rebuilding NixOS configuration..."
	@sudo nixos-rebuild switch --flake $(FLAKE)
	@echo "NixOS rebuild complete."

home-manager-switch:
	@echo "Switching Home Manager configuration..."
	@home-manager switch --flake $(HOME_TARGET)
	@echo "Home Manager switch complete."

nix-gc:
	@echo "Collecting Nix garbage..."
	@nix-collect-garbage -d
	@echo "Garbage collection complete."

flake-update:
	@echo "Updating flake inputs..."
	@nix flake update
	@echo "Flake update complete."

flake-check:
	@echo "Checking flake..."
	@nix flake check
	@echo "Flake check complete."

bootstrap-mac: install-nix install-nix-darwin
</file>

<file path="modules/home-manager/programs/gpg/default.nix">
{
  pkgs,
  lib,
  ...
}: {
  # Install gpg via home-manager module
  programs.gpg = {
    enable = true;
    settings = {
      personal-cipher-preferences = "AES256";
      personal-digest-preferences = "SHA512";
      personal-compress-preferences = "ZLIB BZIP2 ZIP Uncompressed";
      default-preference-list = "SHA512 AES256 ZLIB BZIP2 ZIP Uncompressed";
      cert-digest-algo = "SHA512";
      s2k-digest-algo = "SHA512";
      s2k-cipher-algo = "AES256";
      charset = "utf-8";
      fixed-list-mode = true;
      no-comments = true;
      no-emit-version = true;
      no-greeting = true;
      keyid-format = "0xlong";
      list-options = "show-uid-validity";
      verify-options = "show-uid-validity";
      with-key-origin = true;
      require-cross-certification = true;
      no-symkey-cache = true;
      use-agent = true;
      throw-keyids = true;
    };
  };

  services.gpg-agent = lib.mkIf (!pkgs.stdenv.isDarwin) {
    enable = true;
    defaultCacheTtl = 86400;
    enableSshSupport = true;
    pinentry.package = lib.mkDefault pkgs.pinentry-gnome3;
  };
}
</file>

<file path="modules/home-manager/programs/krew/default.nix">
{
  pkgs,
  lib,
  ...
}: let
  krewPkgs = [
    "ctx"
    "ns"
  ];

  # Convert the list of plugins into a space-separated string
  krewPkgStr = lib.concatStringsSep " " krewPkgs;
in {
  # Ensure krew package installed
  home.packages = with pkgs; [
    krew
  ];

  # Ensure krew is in the PATH
  home.sessionPath = [
    "$HOME/.krew/bin"
  ];

  # Install krew plugins
  home.activation.krew = lib.hm.dag.entryAfter ["writeBoundary"] ''
    export PATH="$HOME/.krew/bin:${pkgs.git}/bin:/usr/bin:$PATH";

    if [ -z "$(${pkgs.krew}/bin/krew list)" ]; then
      ${pkgs.krew}/bin/krew install ${krewPkgStr}
    else
      ${pkgs.krew}/bin/krew upgrade
    fi
  '';
}
</file>

<file path="modules/home-manager/programs/neovim/lazyvim/lua/plugins/lsp.lua">
return {
  {
    "neovim/nvim-lspconfig",
    opts = {
      servers = {
        bashls = {},
        gopls = {
          settings = {
            gopls = {
              semanticTokens = true,
              analyses = {
                unusedparams = true,
              },
              staticcheck = true,
              hints = {
                assignVariableTypes = false,
                compositeLiteralFields = false,
                compositeLiteralTypes = false,
                constantValues = false,
                functionTypeParameters = false,
                parameterNames = false,
                rangeVariableTypes = false,
              },
            },
          },
        },
        jsonls = {},
        lua_ls = {
          settings = {
            Lua = {
              workspace = {
                checkThirdParty = false,
              },
              completion = {
                callSnippet = "Replace",
              },
            },
          },
        },
        nixd = {},
        pyright = {
          settings = {
            python = {
              analysis = {
                autoSearchPaths = true,
                useLibraryCodeForTypes = true,
                typeCheckingMode = "basic",
                diagnosticMode = "openFilesOnly",
              },
            },
          },
        },
        ruff = {},
        terraformls = {},
        tflint = {},
        yamlls = {
          settings = {
            yaml = {
              keyOrdering = false,
            },
          },
        },
      },
    },
  },
}
</file>

<file path="modules/home-manager/programs/neovim/lazyvim/lua/plugins/none-ls.lua">
return {
  "nvimtools/none-ls.nvim",
  opts = function()
    local nls = require("null-ls")
    return {
      root_dir = require("null-ls.utils").root_pattern(".null-ls-root", ".neoconf.json", "Makefile", ".git"),
      sources = {
        -- code actions
        -- formatters
        nls.builtins.formatting.alejandra,
        nls.builtins.formatting.black.with({
          extra_args = { "--line-length", "120" },
        }),
        nls.builtins.formatting.prettier.with({
          filetypes = {
            "css",
            "markdown",
            "yaml.docker-compose",
            "yaml.kubernetes",
            "yaml",
          },
        }),
        nls.builtins.formatting.goimports,
        nls.builtins.formatting.isort,
        nls.builtins.formatting.markdownlint,
        nls.builtins.formatting.shfmt,
        nls.builtins.formatting.stylua,
        nls.builtins.formatting.terraform_fmt,
        -- linters
        nls.builtins.diagnostics.golangci_lint,
        nls.builtins.diagnostics.hadolint,
        nls.builtins.diagnostics.markdownlint.with({ extra_args = { "--disable", "MD013" } }),
      },
      on_attach = function(client, bufnr)
        -- Disable diagnostics for non-file buffers (like terminals)
        if vim.bo[bufnr].buftype ~= "" then
          vim.diagnostic.enable(false, bufnr)
        end
      end,
    }
  end,
}
</file>

<file path="modules/home-manager/programs/ulauncher/default.nix">
{
  pkgs,
  lib,
  ...
}: let
  manageShortcutsScript = pkgs.writeScriptBin "manage-ulauncher-shortcuts" ''
    #!/usr/bin/env bash
    set -euo pipefail

    configDir="$HOME/.config/ulauncher"
    shortcutsFile="$configDir/shortcuts.json"

    # Ensure the configuration directory exists
    mkdir -p "$configDir"

    # JSON content to ensure is in `shortcuts.json`
    cat >"$shortcutsFile" <<'EOF'
    {
      "0155d149-516b-4f38-bdab-f51d245818e3": {
        "id": "0155d149-516b-4f38-bdab-f51d245818e3",
        "name": "Search",
        "keyword": "br",
        "cmd": "https://search.brave.com/search?q=%s",
        "icon": "~/.config/ulauncher/icons/brave.png",
        "is_default_search": true,
        "run_without_argument": false,
        "added": 1747897791.8054328
      },
      "11e80e5b-3841-403c-ae08-64e53372e7df": {
        "id": "11e80e5b-3841-403c-ae08-64e53372e7df",
        "name": "Quit All Applications",
        "keyword": "quit",
        "cmd": "#!/usr/bin/env bash\n\ncase \"$DESKTOP_SESSION\" in\nhyprland)\n\thyprctl -j clients 2>/dev/null |\n\t\tjq -j '.[] | \"dispatch closewindow address:\\(.address); \"' |\n\t\txargs -r hyprctl --batch 2>/dev/null\n\t;;\n\nplasma)\n\tkdotool search '.*' windowclose %@\n\t;;\n\n*)\n\texit 0\n\t;;\nesac",
        "icon": "~/.config/ulauncher/icons/quit.png",
        "is_default_search": false,
        "run_without_argument": true,
        "added": 1747897834.2170281
      },
      "b72345b1-312c-4a39-89fc-0265437c2ccf": {
        "id": "b72345b1-312c-4a39-89fc-0265437c2ccf",
        "name": "Work Tools",
        "keyword": "work",
        "cmd": "#!/usr/bin/env bash\n\n# Check if Brave is already running\nif ! pgrep \"brave\" >/dev/null; then\n\techo \"Launching Brave...\"\n\tbrave &\nelse\n\techo \"Brave is already running.\"\nfi\n\n# Check if Alacritty is already running\nif ! pgrep -x \"alacritty\" >/dev/null; then\n\techo \"Launching Alacritty...\"\n\talacritty &\nelse\n\techo \"Alacritty is already running.\"\nfi\n\n# Check if Telegram is already running\nif ! pgrep -x \"telegram-desktop\" >/dev/null; then\n\techo \"Launching Telegram...\"\n\ttelegram-desktop\nelse\n\techo \"Telegram is already running.\"\nfi",
        "icon": "~/.config/ulauncher/icons/tools.png",
        "is_default_search": false,
        "run_without_argument": true,
        "added": 1747897863.1040845
      },
      "56b485f3-9561-49af-9fe4-b4144efa9fb2": {
        "id": "56b485f3-9561-49af-9fe4-b4144efa9fb2",
        "name": "Lock\u2005Screen",
        "keyword": "lock",
        "cmd": "#!/usr/bin/env bash\n\nloginctl lock-session",
        "icon": "~/.config/ulauncher/icons/icon.svg",
        "is_default_search": false,
        "run_without_argument": true,
        "added": 1747898201.1167789
      },
      "8407589e-0e44-41cf-8a86-32d9cc3b45d5": {
        "id": "8407589e-0e44-41cf-8a86-32d9cc3b45d5",
        "name": "Suspend / Sleep",
        "keyword": "suspend",
        "cmd": "#!/usr/bin/env bash\n\nsystemctl suspend -i",
        "icon": "~/.config/ulauncher/icons/icon.svg",
        "is_default_search": false,
        "run_without_argument": true,
        "added": 1747898274.058171
      },
      "eda21a94-aa60-4db8-98cc-ff37687af457": {
        "id": "eda21a94-aa60-4db8-98cc-ff37687af457",
        "name": "Shut\u2005Down\u2005/\u2005Power\u2005Off",
        "keyword": "shutdown",
        "cmd": "#!/usr/bin/env bash\n\nsystemctl poweroff -i",
        "icon": "~/.config/ulauncher/icons/icon.svg",
        "is_default_search": false,
        "run_without_argument": true,
        "added": 1747898438.8860931
      },
      "dac53ff3-db88-451b-89b1-89e81cfdd165": {
        "id": "dac53ff3-db88-451b-89b1-89e81cfdd165",
        "name": "Reboot\u2005/\u2005Restart",
        "keyword": "reboot",
        "cmd": "#!/usr/bin/env bash\n\nsystemctl reboot -i",
        "icon": "~/.config/ulauncher/icons/icon.svg",
        "is_default_search": false,
        "run_without_argument": true,
        "added": 1747898972.3437614
      }
    }
    EOF
  '';
in {
  config = lib.mkIf (!pkgs.stdenv.isDarwin) {
    # Ulauncher package
    home.packages = with pkgs; [
      ulauncher
    ];

    # Source ulauncher configuration from this repository
    xdg.configFile = {
      "ulauncher" = {
        recursive = true;
        source = ./config;
      };
    };

    # A bit nasty, but shortcuts file has to be writeble by the ulauncher
    home.activation.manageShortcuts = lib.hm.dag.entryAfter ["writeBoundary"] ''
      ${manageShortcutsScript}/bin/manage-ulauncher-shortcuts
    '';
  };
}
</file>

<file path="modules/home-manager/programs/zsh/default.nix">
{
  lib,
  pkgs,
  ...
}: {
  # Zsh shell configuration
  programs.zsh = {
    enable = true;
    enableCompletion = true;
    shellAliases = {
      ff = "fastfetch";

      # git
      gaa = "git add --all";
      gcam = "git commit --all --message";
      gcl = "git clone";
      gco = "git checkout";
      ggl = "git pull";
      ggp = "git push";

      # kubectl
      k = "kubectl";
      kgno = "kubectl get node";
      kdno = "kubectl describe node";
      kgp = "kubectl get pods";
      kep = "kubectl edit pods";
      kdp = "kubectl describe pods";
      kdelp = "kubectl delete pods";
      kgs = "kubectl get svc";
      kes = "kubectl edit svc";
      kds = "kubectl describe svc";
      kdels = "kubectl delete svc";
      kgi = "kubectl get ingress";
      kei = "kubectl edit ingress";
      kdi = "kubectl describe ingress";
      kdeli = "kubectl delete ingress";
      kgns = "kubectl get namespaces";
      kens = "kubectl edit namespace";
      kdns = "kubectl describe namespace";
      kdelns = "kubectl delete namespace";
      kgd = "kubectl get deployment";
      ked = "kubectl edit deployment";
      kdd = "kubectl describe deployment";
      kdeld = "kubectl delete deployment";
      kgsec = "kubectl get secret";
      kdsec = "kubectl describe secret";
      kdelsec = "kubectl delete secret";

      ld = "lazydocker";
      lg = "lazygit";

      repo = "cd $HOME/Documents/repositories";
      temp = "cd $HOME/Downloads/temp";

      v = "nvim";
      vi = "nvim";
      vim = "nvim";

      ls = "eza --icons always"; # default view
      ll = "eza -bhl --icons --group-directories-first"; # long list
      la = "eza -abhl --icons --group-directories-first"; # all list
      lt = "eza --tree --level=2 --icons"; # tree
    };
    initContent = ''
      # kubectl auto-complete
      source <(kubectl completion zsh)

      # bindings
      bindkey -e
      bindkey '^H' backward-delete-word
      bindkey '^[[1;5C' forward-word
      bindkey '^[[1;5D' backward-word

      # open commands in $EDITOR with C-e
      autoload -z edit-command-line
      zle -N edit-command-line
      bindkey "^v" edit-command-line

      ${lib.optionalString pkgs.stdenv.hostPlatform.isDarwin ''
        # Enable ALT-C fzf keybinding on Mac
        bindkey 'ć' fzf-cd-widget
      ''}
    '';
  };
}
</file>

<file path="modules/home-manager/services/waybar/default.nix">
{...}: {
  # Install and configure waybar via home-manager module
  programs.waybar = {
    enable = true;
    settings = {
      mainBar = {
        layer = "top";
        position = "top";
        exclusive = true;
        passthrough = false;
        fixed-center = true;
        ipc = true;
        margin-top = 3;
        margin-left = 4;
        margin-right = 4;

        modules-left = [
          "hyprland/workspaces"
          "cpu"
          "temperature"
          "memory"
          "backlight"
        ];

        modules-center = [
          "clock"
          "custom/notification"
        ];

        modules-right = [
          "privacy"
          "custom/recorder"
          "hyprland/language"
          "tray"
          "bluetooth"
          "pulseaudio"
          "pulseaudio#microphone"
          "battery"
        ];

        backlight = {
          interval = 2;
          align = 0;
          rotate = 0;
          format = "{icon} {percent}%";
          format-icons = ["󰃞" "󰃟" "󰃝" "󰃠"];
          icon-size = 10;
          on-scroll-up = "brightnessctl set +5%";
          on-scroll-down = "brightnessctl set 5%-";
          smooth-scrolling-threshold = 1;
        };

        battery = {
          interval = 60;
          align = 0;
          rotate = 0;
          full-at = 100;
          design-capacity = false;
          states = {
            good = 95;
            warning = 30;
            critical = 20;
          };
          format = "<big>{icon}</big>  {capacity}%";
          format-charging = " {capacity}%";
          format-plugged = " {capacity}%";
          format-full = "{icon} Full";
          format-alt = "{icon} {time}";
          format-icons = [
            ""
            ""
            ""
            ""
            ""
          ];
          format-time = "{H}h {M}min";
          tooltip = true;
          tooltip-format = "{timeTo} {power}w";
        };

        bluetooth = {
          format = "";
          format-connected = " {num_connections}";
          tooltip-format = " {device_alias}";
          tooltip-format-connected = "{device_enumerate}";
          tooltip-format-enumerate-connected = "Name: {device_alias}\nBattery: {device_battery_percentage}%";
          on-click = "blueman-manager";
        };

        clock = {
          format = "{:%b %d %H:%M}";
          format-alt = " {:%H:%M   %Y, %d %B, %A}";
          tooltip-format = "<tt><small>{calendar}</small></tt>";
          calendar = {
            mode = "year";
            mode-mon-col = 3;
            weeks-pos = "right";
            on-scroll = 1;
            format = {
              months = "<span color='#f5a97f'><b>{}</b></span>";
              days = "<span color='#a5adce'><b>{}</b></span>";
              weeks = "<span color='#8087a2'><b>W{}</b></span>";
              weekdays = "<span color='#b7bdf8'><b>{}</b></span>";
              today = "<span color='#ed8796'><b><u>{}</u></b></span>";
            };
          };
        };

        cpu = {
          format = "󰍛 {usage}%";
          interval = 1;
        };

        "hyprland/language" = {
          format = "{short}";
        };

        "hyprland/workspaces" = {
          all-outputs = true;
          format = "{name}";
          on-click = "activate";
          show-special = false;
          sort-by-number = true;
        };

        memory = {
          interval = 10;
          format = "󰾆 {used:0.1f}G";
          format-alt = "󰾆 {percentage}%";
          format-alt-click = "click";
          tooltip = true;
          tooltip-format = "{used:0.1f}GB/{total:0.1f}G";
          on-click-right = "foot --title btop sh -c 'btop'";
        };

        privacy = {
          icon-size = 14;
          modules = [
            {
              type = "screenshare";
              tooltip = true;
            }
          ];
        };

        pulseaudio = {
          format = "{icon} {volume}%";
          format-muted = "";
          format-icons = {
            default = [
              ""
              ""
              " "
            ];
          };
          on-click = "pavucontrol";
          on-scroll-up = "pamixer -i 5";
          on-scroll-down = "pamixer -d 5";
          scroll-step = 5;
          on-click-right = "pamixer -t";
          smooth-scrolling-threshold = 1;
          ignored-sinks = ["Easy Effects Sink"];
        };

        "pulseaudio#microphone" = {
          format = "{format_source}";
          format-source = " {volume}%";
          format-source-muted = "";
          on-click = "pavucontrol";
          on-click-right = "pamixer --default-source -t";
          on-scroll-up = "pamixer --default-source -i 5";
          on-scroll-down = "pamixer --default-source -d 5";
        };

        temperature = {
          interval = 10;
          tooltip = false;
          hwmon-path = "/sys/class/hwmon/hwmon1/temp1_input";
          critical-threshold = 82;
          format-critical = "{icon} {temperatureC}°C";
          format = "󰈸 {temperatureC}°C";
        };

        tray = {
          spacing = 20;
        };

        "custom/notification" = {
          tooltip = false;
          format = "{icon}";
          format-icons = {
            notification = "<span foreground='red'><sup></sup></span>";
            none = "";
            dnd-notification = "<span foreground='red'><sup></sup></span>";
            dnd-none = "";
            inhibited-notification = "<span foreground='red'><sup></sup></span>";
            inhibited-none = "";
            dnd-inhibited-notification = "<span foreground='red'><sup></sup></span>";
            dnd-inhibited-none = "";
          };
          return-type = "json";
          exec-if = "which swaync-client";
          exec = "swaync-client -swb";
          on-click = "swaync-client -t -sw";
          on-click-right = "swaync-client -d -sw";
          escape = true;
        };

        "custom/recorder" = {
          format = "";
          tooltip = false;
          return-type = "json";
          exec = "echo '{\"class\": \"recording\"}'";
          exec-if = "pgrep wf-recorder";
          interval = 1;
          on-click = "screen-recorder";
        };
      };
    };
    style = ''
      * {
        font-family: "JetBrainsMono Nerd Font";
        font-weight: bold;
        min-height: 0;
        font-size: 100%;
        font-feature-settings: '"zero", "ss01", "ss02", "ss03", "ss04", "ss05", "cv31"';
        padding: 0px;
        margin-top: 1px;
        margin-bottom: 1px;
      }

      window#waybar {
        background: rgba(0, 0, 0, 0);
      }

      window#waybar.hidden {
        opacity: 0.5;
      }

      tooltip {
        background: #24273A;
        border-radius: 8px;
      }

      tooltip label {
        color: #cad3f5;
        margin-right: 5px;
        margin-left: 5px;
      }

      .modules-right,
      .modules-center,
      .modules-left {
        background-color: rgba(0, 0, 0, 0.6);
        border: 0px solid #b4befe;
        border-radius: 8px;
      }

      #workspaces button {
        padding: 2px;
        color: #6e738d;
        margin-right: 5px;
      }

      #workspaces button.active {
        color: #dfdfdf;
        border-radius: 3px 3px 3px 3px;
      }

      #workspaces button.focused {
        color: #d8dee9;
      }

      #workspaces button.urgent {
        color: #ed8796;
        border-radius: 8px;
      }

      #workspaces button:hover {
        color: #dfdfdf;
        border-radius: 3px;
      }

      #backlight,
      #battery,
      #bluetooth,
      #clock,
      #cpu,
      #custom-notification,
      #custom-recorder,
      #language,
      #memory,
      #privacy,
      #pulseaudio,
      #temperature,
      #tray,
      #workspaces {
        color: #dfdfdf;
        padding: 0px 10px;
        border-radius: 8px;
      }

      #temperature.critical {
        background-color: #ff0000;
      }

      @keyframes blink {
        to {
          color: #000000;
        }
      }

      #taskbar button.active {
        background-color: #7f849c;
      }

      #battery.critical:not(.charging) {
        color: #f53c3c;
        animation-name: blink;
        animation-duration: 0.5s;
        animation-timing-function: linear;
        animation-iteration-count: infinite;
        animation-direction: alternate;
      }

      #custom-recorder {
        color: #ff2800;
      }

      #privacy {
        color: #f5a97f;
      }
    '';
  };
}
</file>

<file path="modules/nixos/desktop/hyprland/default.nix">
{pkgs, ...}: {
  # Enable GDM display manager
  services.xserver.displayManager.gdm.enable = true;

  # Call dbus-update-activation-environment on login
  services.xserver.updateDbusEnvironment = true;

  # Enables support for Bluetooth
  hardware.bluetooth = {
    enable = true;
    powerOnBoot = true;
  };

  # Enable Bluetooth support
  services.blueman.enable = true;

  # Enable Hyprland
  programs.hyprland = {
    enable = true;
  };

  # Enable security services
  services.gnome.gnome-keyring.enable = true;
  security.polkit.enable = true;
  security.pam.services = {
    hyprlock = {};
    gdm.enableGnomeKeyring = true;
  };

  # List of Hyprland specific packages
  environment.systemPackages = with pkgs; [
    file-roller # archive manager
    gnome-calculator
    gnome-pomodoro
    gnome-text-editor
    loupe # image viewer
    nautilus # file manager
    seahorse # keyring manager
    totem # Video player

    brightnessctl
    grim
    hypridle
    hyprlock
    hyprpaper
    hyprpicker
    libnotify
    networkmanagerapplet
    pamixer
    slurp
    wf-recorder
    wlr-randr
    wlsunset
  ];
}
</file>

<file path="modules/nixos/desktop/kde/default.nix">
{pkgs, ...}: let
  wallpaper = ../../../home-manager/misc/wallpaper/wallpaper.jpg;
in {
  # Enable KDE
  services.displayManager.sddm = {
    enable = true;
    enableHidpi = true;
    settings.Theme.CursorTheme = "Yaru";
    wayland.enable = true;
  };
  services.desktopManager.plasma6.enable = true;

  environment.systemPackages = [
    pkgs.yaru-theme
    (pkgs.writeTextDir "share/sddm/themes/breeze/theme.conf.user" ''
      [General]
      background=${wallpaper};
      type=image
    '')
  ];

  # Excluding some KDE applications from the default install
  environment.plasma6.excludePackages = with pkgs.kdePackages; [
    ark
    baloo-widgets
    elisa
    ffmpegthumbs
    kate
    khelpcenter
    konsole
    krdp
    plasma-browser-integration
    xwaylandvideobridge
  ];

  # Disabled redundant services
  systemd.user.services = {
    "app-org.kde.discover.notifier@autostart".enable = false;
    "app-org.kde.kalendarac@autostart".enable = false;
  };
}
</file>

<file path="home/nabokikh/nabokikh-z13/default.nix">
{nhModules, ...}: {
  imports = [
    "${nhModules}/common"
    "${nhModules}/desktop/hyprland"
  ];

  # Enable home-manager
  programs.home-manager.enable = true;

  # https://nixos.wiki/wiki/FAQ/When_do_I_update_stateVersion
  home.stateVersion = "25.05";
}
</file>

<file path="hosts/energy/default.nix">
{
  inputs,
  hostname,
  nixosModules,
  ...
}: {
  imports = [
    inputs.hardware.nixosModules.common-cpu-amd
    inputs.hardware.nixosModules.common-gpu-amd
    inputs.hardware.nixosModules.common-pc-ssd

    ./hardware-configuration.nix
    "${nixosModules}/common"
    "${nixosModules}/desktop/hyprland"
    "${nixosModules}/programs/steam"
  ];

  # Set hostname
  networking.hostName = hostname;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  system.stateVersion = "25.05";
}
</file>

<file path="modules/home-manager/programs/k9s/default.nix">
{...}: {
  # Install k9s via home-manager module
  programs.k9s = {
    enable = true;
    settings.k9s = {
      ui = {
        headless = true;
        logoless = true;
      };
    };
    hotkey.hotKeys = {
      shift-1 = {
        shortCut = "Shift-1";
        description = "Show pods";
        command = "pods";
      };
      shift-2 = {
        shortCut = "Shift-2";
        description = "Show deployments";
        command = "dp";
      };
      shift-3 = {
        shortCut = "Shift-3";
        description = "Show nodes";
        command = "nodes";
      };
      shift-4 = {
        shortCut = "Shift-4";
        description = "Show services";
        command = "services";
      };
      shift-5 = {
        shortCut = "Shift-5";
        description = "Show Ingress";
        command = "ingress";
      };
      shift-6 = {
        shortCut = "Shift-6";
        description = "Show Pulses";
        command = "pulses";
      };
      shift-7 = {
        shortCut = "Shift-7";
        description = "Show Events";
        command = "events";
      };
    };
  };

  # Enable catppuccin theming for k9s
  catppuccin.k9s.enable = true;
}
</file>

<file path="modules/home-manager/programs/neovim/lazyvim/lua/plugins/treesitter.lua">
return {
  "nvim-treesitter/nvim-treesitter",
  opts = {
    highlight = {
      enable = true,
    },
    rainbow = {
      enable = true,
      extended_mode = true,
      max_file_lines = 1000,
    },
    indent = {
      enable = true,
    },
    ensure_installed = {
      "bash",
      "c",
      "dockerfile",
      "go",
      "hcl",
      "helm",
      "json",
      "jsonc",
      "lua",
      "luadoc",
      "luap",
      "make",
      "markdown",
      "markdown_inline",
      "nix",
      "python",
      "regex",
      "terraform",
      "vim",
      "vimdoc",
      "yaml",
    },
  },
}
</file>

<file path="modules/home-manager/scripts/bin/traverser">
#!/usr/bin/env python3

import configparser
import os
import re
import subprocess
import sys


def get_all_kube_contexts():
    """Get a list of all Kubernetes context names."""
    try:
        result = subprocess.run(
            ["kubectl", "config", "get-contexts", "-o", "name"],
            capture_output=True,
            text=True,
            check=True,
        )
        contexts = result.stdout.strip().split("\n")
        if not contexts or contexts == [""]:
            return []
        return contexts
    except subprocess.CalledProcessError:
        return []
    except FileNotFoundError:
        print("Error: 'kubectl' command not found.")
        sys.exit(1)


def switch_kube_context(context_name):
    """Switch to the specified Kubernetes context."""
    try:
        subprocess.run(
            ["kubectl", "config", "use-context", context_name],
            check=True,
            capture_output=True,
            text=True,
        )
        return True
    except subprocess.CalledProcessError:
        return False


def get_current_kube_context_info():
    """Get the current Kubernetes context ARN and extract the account number."""
    try:
        current_context_name = subprocess.check_output(["kubectl", "config", "current-context"]).decode().strip()

        match = re.search(
            r"arn:aws:eks:([\w-]+):(\d+):cluster/([\w-]+)",
            current_context_name,
        )
        if match:
            return match.group(2)
        return None
    except subprocess.CalledProcessError:
        return None


def parse_aws_config():
    """Parse AWS config file."""
    aws_config_path = os.path.expanduser("~/.aws/config")
    if not os.path.exists(aws_config_path):
        return None

    config = configparser.ConfigParser()
    config.read(aws_config_path)
    return config


def find_profile_name(config, account_number):
    """Find the profile name by matching the account number."""
    if not config or not account_number:
        return None
    for section in config.sections():
        profile_section_match = re.match(r"profile\s+(.+)", section, re.IGNORECASE)
        if profile_section_match:
            profile_name_in_section = profile_section_match.group(1)
            if "role_arn" in config[section]:
                role_arn = config[section]["role_arn"]
                if f"::{account_number}:" in role_arn:
                    return profile_name_in_section
    return None


def execute_saml2aws_command(profile_name, command, max_attempts=2):
    """Execute the command with saml2aws credentials."""
    attempt = 0

    while attempt < max_attempts:
        try:
            if attempt > 0:
                print(f"Attempting login (attempt {attempt}/{max_attempts})")
                subprocess.run(
                    ["saml2aws", "login", "--profile", profile_name, "--skip-prompt"], check=True, timeout=30
                )

            cmd_parts = command.split()
            process_env = dict(os.environ, AWS_PROFILE=profile_name)
            result = subprocess.run(
                cmd_parts,
                env=process_env,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                check=False,
            )

            return result.stdout.strip() if result.stdout else ""

        except subprocess.CalledProcessError as e:
            print(f"Command failed: {e}")
        except subprocess.TimeoutExpired:
            print("Login command timed out")
        except Exception as e:
            print(f"Error: {str(e)}")

        attempt += 1

    return "Failed to execute command after multiple attempts"


def run_command_in_cluster(command):
    """Run the user-provided command in the current cluster."""
    try:
        process = subprocess.Popen(command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        stdout, stderr = process.communicate()

        if process.returncode != 0:
            return f"Command failed with exit code {process.returncode}:\n{stderr}"

        if stdout:
            return stdout
        elif stderr:
            return f"Command produced error: {stderr}"
        else:
            return "Command executed but produced no output."
    except Exception as e:
        return f"Error executing command: {str(e)}"


def main():
    if len(sys.argv) < 2:
        print("Usage: traverser 'command to execute'")
        exit(1)

    user_command = " ".join(sys.argv[1:])
    print(f"Command to execute: {user_command}")

    aws_config = parse_aws_config()
    if aws_config is None:
        print("Could not parse AWS config. Exiting.")
        sys.exit(1)

    contexts = get_all_kube_contexts()
    if not contexts:
        print("No contexts found or error retrieving contexts. Exiting.")
        sys.exit(1)

    print(f"Found {len(contexts)} contexts")
    original_context = subprocess.check_output(["kubectl", "config", "current-context"]).decode().strip()

    for context_name in contexts:
        if not switch_kube_context(context_name):
            print(f"Failed to switch to context: {context_name}")
            continue

        print(f"[CONTEXT: {context_name}]")

        account_number = get_current_kube_context_info()
        if not account_number:
            print(f"Could not extract account number from context: {context_name}")
            continue

        profile_name = find_profile_name(aws_config, account_number)
        if not profile_name:
            print(f"No matching AWS profile found for account: {account_number}")
            continue

        output = execute_saml2aws_command(profile_name, user_command)
        print("COMMAND OUTPUT:")
        print(output)

    switch_kube_context(original_context)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nOperation cancelled by the user. Exiting...")
        sys.exit(1)
</file>

<file path="modules/home-manager/services/flatpak/default.nix">
{
  config,
  inputs,
  lib,
  pkgs,
  ...
}: {
  imports = [inputs.nix-flatpak.homeManagerModules.nix-flatpak];

  config = lib.mkIf (!pkgs.stdenv.isDarwin) {
    services.flatpak = {
      enable = true;
      packages = ["us.zoom.Zoom"];
      uninstallUnmanaged = true;
      update.auto.enable = false;
    };

    home.packages = [pkgs.flatpak];

    xdg.systemDirs.data = [
      "/var/lib/flatpak/exports/share"
      "${config.home.homeDirectory}/.local/share/flatpak/exports/share"
    ];
  };
}
</file>

<file path="home/nabokikh/nabokikh-mac/default.nix">
{nhModules, ...}: {
  imports = [
    "${nhModules}/common"
  ];

  # Enable home-manager
  programs.home-manager.enable = true;

  # https://nixos.wiki/wiki/FAQ/When_do_I_update_stateVersion
  home.stateVersion = "25.05";
}
</file>

<file path="modules/home-manager/scripts/bin/ocr">
#!/usr/bin/env bash

set -eo pipefail

if [ "$XDG_CURRENT_DESKTOP" = "KDE" ]; then
	TMPFILE=$(mktemp)
	trap 'rm -f "$TMPFILE"' EXIT

	spectacle -r -b -w -n -o "$TMPFILE" -b -n 2>/dev/null

	if [ -s "$TMPFILE" ]; then
		tesseract -l "eng+rus+pol" "$TMPFILE" - | wl-copy
	fi
else
	grim -t png -g "$(slurp)" - |
		tesseract stdin stdout -l "eng+rus+pol" |
		tr -d '\f' | wl-copy
fi
</file>

<file path="home/nabokikh/energy/default.nix">
{nhModules, ...}: {
  imports = [
    "${nhModules}/common"
    "${nhModules}/desktop/hyprland"
  ];

  # Enable home-manager
  programs.home-manager.enable = true;

  # https://nixos.wiki/wiki/FAQ/When_do_I_update_stateVersion
  home.stateVersion = "25.05";
}
</file>

<file path="flake.nix">
{
  description = "NixOS and nix-darwin configs for my machines";
  inputs = {
    # Nixpkgs
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    nixpkgs-stable.url = "github:nixos/nixpkgs/nixos-25.05";

    # Home manager
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # NixOS profiles to optimize settings for different hardware
    hardware.url = "github:nixos/nixos-hardware";

    # Global catppuccin theme
    catppuccin.url = "github:catppuccin/nix";

    # Declarative flatpak manager
    nix-flatpak.url = "github:gmodena/nix-flatpak/?ref=v0.6.0";

    # Declarative kde plasma manager
    plasma-manager = {
      url = "github:nix-community/plasma-manager";
      inputs.nixpkgs.follows = "nixpkgs";
      inputs.home-manager.follows = "home-manager";
    };

    # Nix Darwin (for MacOS machines)
    darwin = {
      url = "github:LnL7/nix-darwin";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = {
    self,
    catppuccin,
    darwin,
    home-manager,
    nixpkgs,
    ...
  } @ inputs: let
    inherit (self) outputs;

    # Define user configurations
    users = {
      nabokikh = {
        avatar = ./files/avatar/face;
        email = "alexander.nabokikh@olx.pl";
        fullName = "Alexander Nabokikh";
        gitKey = "C5810093";
        name = "nabokikh";
      };
    };

    # Function for NixOS system configuration
    mkNixosConfiguration = hostname: username:
      nixpkgs.lib.nixosSystem {
        specialArgs = {
          inherit inputs outputs hostname;
          userConfig = users.${username};
          nixosModules = "${self}/modules/nixos";
        };
        modules = [./hosts/${hostname}];
      };

    # Function for nix-darwin system configuration
    mkDarwinConfiguration = hostname: username:
      darwin.lib.darwinSystem {
        system = "aarch64-darwin";
        specialArgs = {
          inherit inputs outputs hostname;
          userConfig = users.${username};
        };
        modules = [
          ./hosts/${hostname}
          home-manager.darwinModules.home-manager
        ];
      };

    # Function for Home Manager configuration
    mkHomeConfiguration = system: username: hostname:
      home-manager.lib.homeManagerConfiguration {
        pkgs = import nixpkgs {inherit system;};
        extraSpecialArgs = {
          inherit inputs outputs;
          userConfig = users.${username};
          nhModules = "${self}/modules/home-manager";
        };
        modules = [
          ./home/${username}/${hostname}
          catppuccin.homeModules.catppuccin
        ];
      };
  in {
    nixosConfigurations = {
      energy = mkNixosConfiguration "energy" "nabokikh";
      nabokikh-z13 = mkNixosConfiguration "nabokikh-z13" "nabokikh";
    };

    darwinConfigurations = {
      "nabokikh-mac" = mkDarwinConfiguration "nabokikh-mac" "nabokikh";
    };

    homeConfigurations = {
      "nabokikh@energy" = mkHomeConfiguration "x86_64-linux" "nabokikh" "energy";
      "nabokikh@nabokikh-mac" = mkHomeConfiguration "aarch64-darwin" "nabokikh" "nabokikh-mac";
      "nabokikh@nabokikh-z13" = mkHomeConfiguration "x86_64-linux" "nabokikh" "nabokikh-z13";
    };

    overlays = import ./overlays {inherit inputs;};
  };
}
</file>

<file path="README.md">
# NixOS and nix-darwin Configurations for My Machines

This repository contains NixOS and nix-darwin configurations for my machines, managed through [Nix Flakes](https://nixos.wiki/wiki/Flakes).

It is structured to easily accommodate multiple machines and user configurations, leveraging [nixpkgs](https://github.com/NixOS/nixpkgs), [home-manager](https://github.com/nix-community/home-manager), [nix-darwin](https://github.com/LnL7/nix-darwin), and various other community contributions for a seamless experience across NixOS and macOS.

## Showcase

### Hyprland

![hyprland](./files/screenshots/hyprland.png)

### KDE

![kde](./files/screenshots/kde.png)

### macOS

![macos](./files/screenshots/mac.png)

## Structure

- `flake.nix`: The flake itself, defining inputs and outputs for NixOS, nix-darwin, and Home Manager configurations.
- `hosts/`: NixOS and nix-darwin configurations for each machine
- `home/`: Home Manager configurations for each machine
- `files/`: Miscellaneous configuration files and scripts used across various applications and services
- `modules/`: Reusable platform-specific modules
  - `nixos/`: NixOS-specific modules
  - `darwin/`: macOS-specific modules
  - `home-manager/`: User-space configuration modules
- `flake.lock`: Lock file ensuring reproducible builds by pinning input versions
- `overlays/`: Custom Nix overlays for package modifications or additions

### Key Inputs

- **nixpkgs**: Points to the `nixos-unstable` channel for access to the latest packages
- **nixpkgs-stable**: Points to the `nixos-25.05` channel, providing stable NixOS packages
- **home-manager**: Manages user-specific configurations, following the `nixpkgs` input (release-25.05)
- **hardware**: Optimizes settings for different hardware configurations
- **catppuccin**: Provides global Catppuccin theme integration
- **nix-flatpak**: Provides declarative way to manage flatpaks
- **darwin**: Enables nix-darwin for macOS system configuration

## Usage

### Adding a New Machine with a New User

To add a new machine with a new user to your NixOS or nix-darwin configuration, follow these steps:

1. **Update `flake.nix`**:

   a. Add the new user to the `users` attribute set:

   ```nix
   users = {
     # Existing users...
     newuser = {
       avatar = ./files/avatar/face;
       email = "newuser@example.com";
       fullName = "New User";
       gitKey = "YOUR_GIT_KEY";
       name = "newuser";
     };
   };
   ```

   b. Add the new machine to the appropriate configuration set:

   For NixOS:

   ```nix
   nixosConfigurations = {
     # Existing configurations...
     newmachine = mkNixosConfiguration "newmachine" "newuser";
   };
   ```

   For nix-darwin:

   ```nix
   darwinConfigurations = {
     # Existing configurations...
     newmachine = mkDarwinConfiguration "newmachine" "newuser";
   };
   ```

   c. Add the new home configuration:

   ```nix
   homeConfigurations = {
     # Existing configurations...
     "newuser@newmachine" = mkHomeConfiguration "x86_64-linux" "newuser" "newmachine";
   };
   ```

2. **Create System Configuration**:

   a. Create a new directory under `hosts/` for your machine:

   ```sh
   mkdir -p hosts/newmachine
   ```

   b. Create `default.nix` in this directory:

   ```sh
   touch hosts/newmachine/default.nix
   ```

   c. Add the basic configuration to `default.nix`:

   For NixOS:

   ```nix
   { inputs, hostname, nixosModules, ... }:
   {
     imports = [
       inputs.hardware.nixosModules.common-cpu-amd
       ./hardware-configuration.nix
       "${nixosModules}/common"
       "${nixosModules}/programs/hyprland"
     ];

     networking.hostName = hostname;
   }
   ```

   For nix-darwin:

   ```nix
   { config, pkgs, ... }:
   {
     # Add machine-specific configurations here
   }
   ```

   d. For NixOS, generate `hardware-configuration.nix`:

   ```sh
   sudo nixos-generate-config --show-hardware-config > hosts/newmachine/hardware-configuration.nix
   ```

3. **Create Home Manager Configuration**:

   a. Create a new directory for the user's host-specific configuration:

   ```sh
   mkdir -p home/newuser/newmachine
   touch home/newuser/newmachine/default.nix
   ```

   b. Add basic home configuration:

   ```nix
   { nhModules, ... }:
   {
     imports = [
       "${nhModules}/common"
       "${nhModules}/programs/neovim"
       "${nhModules}/services/waybar"
     ];
   }
   ```

4. **Building and Applying Configurations**:

   a. Commit new files to git:

   ```sh
   git add .
   ```

   b. Build and switch to the new system configuration:

   For NixOS:

   ```sh
   sudo nixos-rebuild switch --flake .#newmachine
   ```

   For nix-darwin (requires Nix and nix-darwin installation first):

   ```sh
   darwin-rebuild switch --flake .#newmachine
   ```

   c. Build and switch to the new Home Manager configuration:

> [!IMPORTANT]
> On fresh systems, bootstrap Home Manager first:

```sh
nix-shell -p home-manager
home-manager switch --flake .#newuser@newmachine
```

After this initial setup, you can rebuild configurations separately and home-manager will be available without additional steps

## Updating Flakes

To update all flake inputs to their latest versions:

```sh
nix flake update
```

## Modules and Configurations

### System Modules (in `modules/nixos/`)

- **`common/`**: Common system space configurations
- **`hyprland`**: Hyprland window manager
- **`kde`**: KDE Desktop environment
- **`steam`**: Steam gaming platform
- **`tlp`**: Laptop power management

### Home Manager Modules (in `modules/home-manager/`)

- **`common/`**: Common user space configurations
- **`aerospace` (Darwin):** Tiling window manager for macOS with custom keybindings and workspace rules.
- **`alacritty`:** GPU-accelerated terminal emulator, configured for tmux integration and platform-specific font sizes/decorations.
- **`atuin`:** Enhanced shell history with cloud sync capabilities.
- **`bat`:** Cat clone with syntax highlighting and Git integration.
- **`brave`:** Web browser with XDG MIME type associations (Linux).
- **`btop`:** Resource monitor with Vim keys.
- **`cliphist` (Linux/Hyprland):** Clipboard manager.
- **`easyeffects` (Linux):** Audio effects processor with a custom "mic" preset for input.
- **`fastfetch`:** Customized system information tool.
- **`fzf`:** Command-line fuzzy finder. **Note:** The `ctrl-y` clipboard binding needs to be conditional (`pbcopy` for macOS, `wl-copy` for Wayland/Linux) for cross-platform compatibility.
- **`git`:** Version control system, configured with user details, GPG signing, and `delta` for diffs.
- **`go`:** Golang development environment setup.
- **`gpg`:** GnuPG settings and GPG agent configuration (with `pinentry-gnome3` on Linux).
- **`gtk`:** GTK3/4 theming (Tela-circle icons, Yaru cursor, Roboto font) and Catppuccin theme.
- **`hyprland`**: Hyprland window manager setup
- **`kde`**: KDE Desktop environment user level configuration
- **`k9s`:** Kubernetes CLI To Manage Your Clusters In Style, with custom hotkeys.
- **`kanshi` (Linux/Hyprland):** Dynamic display output configuration based on connected monitors.
- **`krew`:** Kubectl plugin manager with a predefined list of plugins.
- **`lazygit`:** Terminal UI for Git.
- **`neovim`:** Highly customized Neovim setup based on LazyVim, with numerous LSP and development tool integrations.
- **`obs-studio` (Linux):** Streaming and screen recording software.
- **`qt` (Linux):** Qt theming using Kvantum and Catppuccin.
- **`saml2aws`:** For AWS authentication via SAML.
- **`scripts/`**: Collection of development utilities
- **`starship`:** Cross-shell prompt with custom configuration.
- **`swaync` (Linux/Hyprland):** Notification daemon.
- **`telegram`:** Desktop client for Telegram.
- **`tmux`:** Terminal multiplexer with custom keybindings and Catppuccin theme.
- **`ulauncher` (Linux):** Application launcher with custom shortcuts for Brave search, system actions (lock, suspend, shutdown, reboot), and launching work applications.
- **`wallpaper`:** Defines the default wallpaper path.
- **`waybar` (Linux/Hyprland):** Highly customized Wayland status bar with modules for workspaces, system stats, clock, tray, etc.
- **`xdg`:** Manages XDG user directories and default MIME type associations for applications like Totem, Loupe, and TextEditor.
- **`zsh`:** Zsh shell with extensive aliases (git, kubectl), completions, and custom keybindings.

## Contributing

Contributions are welcome! If you have improvements or suggestions, please open an issue or submit a pull request.

## License

This repository is licensed under MIT License. Feel free to use, modify, and distribute according to the license terms.
</file>

<file path="modules/home-manager/desktop/kde/default.nix">
{
  config,
  inputs,
  lib,
  nhModules,
  pkgs,
  ...
}: {
  imports = [
    inputs.plasma-manager.homeManagerModules.plasma-manager
    "${nhModules}/misc/wallpaper"
  ];

  home.packages = with pkgs; [
    (catppuccin-kde.override {
      flavour = ["macchiato"];
      accents = ["lavender"];
    })
    kara
    kde-rounded-corners
    kdePackages.krohnkite
    kdotool
    tela-circle-icon-theme
  ];

  # Set gpg agent specific to KDE/Kwallet
  services.gpg-agent = {
    pinentry.package = lib.mkForce pkgs.kwalletcli;
    extraConfig = "pinentry-program ${pkgs.kwalletcli}/bin/pinentry-kwallet";
  };

  programs.plasma = {
    enable = true;

    fonts = {
      fixedWidth = {
        family = "JetBrainsMono Nerd Font Mono";
        pointSize = 11;
      };
      general = {
        family = "Roboto";
        pointSize = 11;
      };
      menu = {
        family = "Roboto";
        pointSize = 11;
      };
      small = {
        family = "Roboto";
        pointSize = 8;
      };
      toolbar = {
        family = "Roboto";
        pointSize = 11;
      };
      windowTitle = {
        family = "Roboto";
        pointSize = 11;
      };
    };

    hotkeys.commands = {
      launch-alacritty = {
        name = "Launch Alacritty";
        key = "Meta+Shift+Return";
        command = "alacritty";
      };
      launch-brave = {
        name = "Launch Brave";
        key = "Meta+Shift+B";
        command = "brave";
      };
      launch-ocr = {
        name = "Launch OCR";
        key = "Alt+@";
        command = "ocr";
      };
      launch-telegram = {
        name = "Launch Telegram";
        key = "Meta+Shift+T";
        command = "telegram-desktop";
      };
      launch-ulauncher = {
        name = "Launch ulauncher";
        key = "Ctrl+Space";
        command = "ulauncher-toggle";
      };
    };

    input = {
      keyboard = {
        layouts = [
          {
            layout = "pl";
          }
          {
            layout = "ru";
          }
        ];
        repeatDelay = 250;
        repeatRate = 40;
      };
      mice = [
        {
          accelerationProfile = "none";
          name = "Razer Razer Viper V3 Pro";
          productId = "00c1";
          vendorId = "1532";
        }
      ];
      touchpads = [
        {
          disableWhileTyping = true;
          enable = true;
          leftHanded = false;
          middleButtonEmulation = true;
          name = "ELAN06A0:00 04F3:3231 Touchpad";
          naturalScroll = true;
          pointerSpeed = 0;
          productId = "3231";
          tapToClick = true;
          vendorId = "04f3";
        }
      ];
    };

    krunner.activateWhenTypingOnDesktop = false;

    kscreenlocker = {
      appearance.wallpaper = "${config.wallpaper}";
      autoLock = false;
      timeout = 0;
    };

    kwin = {
      effects = {
        blur.enable = false;
        cube.enable = false;
        desktopSwitching.animation = "off";
        dimAdminMode.enable = false;
        dimInactive.enable = false;
        fallApart.enable = false;
        fps.enable = false;
        minimization.animation = "off";
        shakeCursor.enable = false;
        slideBack.enable = false;
        snapHelper.enable = false;
        translucency.enable = false;
        windowOpenClose.animation = "off";
        wobblyWindows.enable = false;
      };

      nightLight = {
        enable = true;
        location.latitude = "52.23";
        location.longitude = "21.01";
        mode = "location";
        temperature.night = 4000;
      };

      virtualDesktops = {
        number = 5;
        rows = 1;
      };
    };

    overrideConfig = true;

    panels = [
      {
        floating = false;
        height = 34;
        lengthMode = "fill";
        location = "top";
        opacity = "translucent";
        widgets = [
          {
            name = "org.dhruv8sh.kara";
            config = {
              general = {
                animationDuration = 0;
                spacing = 3;
                type = 1;
              };
              type1 = {
                fixedLen = 3;
                labelSource = 0;
              };
            };
          }
          "org.kde.plasma.panelspacer"
          {
            name = "org.kde.plasma.digitalclock";
            config = {
              Appearance = {
                dateDisplayFormat = "BesideTime";
                dateFormat = "custom";
                use24hFormat = 2;
              };
            };
          }
          "org.kde.plasma.panelspacer"
          {
            systemTray = {
              items = {
                showAll = false;
                shown = [
                  "org.kde.plasma.battery"
                  "org.kde.plasma.keyboardlayout"
                  "org.kde.plasma.networkmanagement"
                  "org.kde.plasma.notifications"
                  "org.kde.plasma.volume"
                ];
                hidden = [
                  "org.kde.plasma.brightness"
                  "org.kde.plasma.clipboard"
                  "org.kde.plasma.devicenotifier"
                  "plasmashell_microphone"
                ];
                configs = {
                  "org.kde.plasma.notifications".config = {
                    Shortcuts = {
                      global = "Meta+V";
                    };
                  };
                  "org.kde.plasma.clipboard".config = {
                    Shortcuts = {
                      global = "Alt+Shift+V";
                    };
                  };
                };
              };
            };
          }
        ];
      }
    ];

    powerdevil = {
      AC = {
        autoSuspend.action = "nothing";
        dimDisplay.enable = false;
        powerButtonAction = "shutDown";
        turnOffDisplay.idleTimeout = "never";
      };
      battery = {
        autoSuspend.action = "nothing";
        dimDisplay.enable = false;
        powerButtonAction = "shutDown";
        turnOffDisplay.idleTimeout = "never";
      };
    };

    session = {
      general.askForConfirmationOnLogout = false;
      sessionRestore.restoreOpenApplicationsOnLogin = "startWithEmptySession";
    };

    shortcuts = {
      ksmserver = {
        "Lock Session" = [
          "Screensaver"
          "Ctrl+Alt+L"
        ];
        "LogOut" = [
          "Ctrl+Alt+Q"
        ];
      };

      "KDE Keyboard Layout Switcher" = {
        "Switch to Next Keyboard Layout" = "Meta+Space";
      };

      kwin = {
        "Overview" = "Meta+A";
        "Switch to Desktop 1" = "Meta+1";
        "Switch to Desktop 2" = "Meta+2";
        "Switch to Desktop 3" = "Meta+3";
        "Switch to Desktop 4" = "Meta+4";
        "Switch to Desktop 5" = "Meta+5";
        "Switch to Desktop 6" = "Meta+6";
        "Switch to Desktop 7" = "Meta+7";
        "Window Move Center" = "Ctrl+Alt+C";
        "Window Close" = "Meta+Q";
        "Window to Desktop 1" = "Meta+!";
        "Window to Desktop 2" = "Meta+@";
        "Window to Desktop 3" = "Meta+#";
        "Window to Desktop 4" = "Meta+$";
        "Window to Desktop 5" = "Meta+%";
        "Window to Desktop 6" = "Meta+^";
      };

      plasmashell = {
        "show-on-mouse-pos" = "";
      };

      "services/org.kde.dolphin.desktop"."_launch" = "Meta+Shift+F";
    };

    spectacle = {
      shortcuts = {
        captureEntireDesktop = "Meta+Ctrl+S";
        captureRectangularRegion = "Meta+Shift+S";
        recordRegion = "Meta+Shift+R";
      };
    };

    window-rules = [
      {
        apply = {
          noborder = {
            value = true;
            apply = "initially";
          };
        };
        description = "Hide titlebar by default";
        match = {
          window-class = {
            value = ".*";
            type = "regex";
          };
        };
      }
      {
        apply = {
          desktops = "Desktop_1";
          desktopsrule = "3";
        };
        description = "Assign Brave to Desktop 1";
        match = {
          window-class = {
            value = "brave-browser";
            type = "substring";
          };
          window-types = ["normal"];
        };
      }
      {
        apply = {
          desktops = "Desktop_2";
          desktopsrule = "3";
        };
        description = "Assign Alacritty to Desktop 2";
        match = {
          window-class = {
            value = "Alacritty";
            type = "substring";
          };
          window-types = ["normal"];
        };
      }
      {
        apply = {
          desktops = "Desktop_3";
          desktopsrule = "3";
        };
        description = "Assign Telegram to Desktop 3";
        match = {
          window-class = {
            value = "org.telegram.desktop";
            type = "substring";
          };
          window-types = ["normal"];
        };
      }
      {
        apply = {
          desktops = "Desktop_4";
          desktopsrule = "3";
        };
        description = "Assign OBS to Desktop 4";
        match = {
          window-class = {
            value = "com.obsproject.Studio";
            type = "substring";
          };
          window-types = ["normal"];
        };
      }
      {
        apply = {
          desktops = "Desktop_4";
          desktopsrule = "3";
          minimizerule = "2";
        };
        description = "Assign Steam to Desktop 4";
        match = {
          window-class = {
            value = "steam";
            type = "exact";
            match-whole = false;
          };
          window-types = ["normal"];
        };
      }
      {
        apply = {
          desktops = "Desktop_5";
          desktopsrule = "3";
        };
        description = "Assign Steam Games to Desktop 5";
        match = {
          window-class = {
            value = "steam_app_";
            type = "substring";
            match-whole = false;
          };
        };
      }
      {
        apply = {
          desktops = "Desktop_5";
          desktopsrule = "3";
          minimizerule = "2";
        };
        description = "Assign Zoom to Desktop 5";
        match = {
          window-class = {
            value = "zoom";
            type = "substring";
          };
          window-types = ["normal"];
        };
      }
    ];

    workspace = {
      enableMiddleClickPaste = false;
      clickItemTo = "select";
      colorScheme = "CatppuccinMacchiatoLavender";
      cursor.theme = "Yaru";
      splashScreen.engine = "none";
      splashScreen.theme = "none";
      tooltipDelay = 1;
      wallpaper = "${config.wallpaper}";
    };

    configFile = {
      baloofilerc."Basic Settings"."Indexing-Enabled" = false;
      kdeglobals = {
        General = {
          BrowserApplication = "brave-browser.desktop";
        };
        Icons = {
          Theme = "Tela-circle-dark";
        };
        KDE = {
          AnimationDurationFactor = 0;
        };
      };
      klipperrc.General.MaxClipItems = 1000;
      kiorc.Confirmations.ConfirmDelete = false;
      kwinrc = {
        Effect-overview.BorderActivate = 9;
        Plugins = {
          krohnkiteEnabled = true;
        };
        "Round-Corners" = {
          ActiveOutlineAlpha = 255;
          ActiveOutlineUseCustom = false;
          ActiveOutlineUsePalette = true;
          ActiveSecondOutlineUseCustom = false;
          ActiveSecondOutlineUsePalette = true;
          DisableOutlineTile = false;
          DisableRoundTile = false;
          InactiveCornerRadius = 8;
          InactiveOutlineAlpha = 0;
          InactiveOutlineUseCustom = false;
          InactiveOutlineUsePalette = true;
          InactiveSecondOutlineAlpha = 0;
          InactiveSecondOutlineThickness = 0;
          OutlineThickness = 1;
          SecondOutlineThickness = 0;
          Size = 8;
        };
        "Script-krohnkite" = {
          floatingClass = "ulauncher,brave-nngceckbapebfimnlniiiahkandclblb-Default";
          screenGapBetween = 3;
          screenGapBottom = 3;
          screenGapLeft = 3;
          screenGapRight = 3;
          screenGapTop = 3;
        };
        Windows = {
          DelayFocusInterval = 0;
          FocusPolicy = "FocusFollowsMouse";
        };
      };
      spectaclerc = {
        Annotations.annotationToolType = 8;
        General = {
          launchAction = "DoNotTakeScreenshot";
          showCaptureInstructions = false;
          showMagnifier = "ShowMagnifierAlways";
        };
        ImageSave.imageCompressionQuality = 100;
      };
    };
    dataFile = {
      "dolphin/view_properties/global/.directory"."Dolphin"."ViewMode" = 1;
      "dolphin/view_properties/global/.directory"."Settings"."HiddenFilesShown" = true;
    };

    startup.startupScript = {
      ulauncher = {
        text = "ulauncher --hide-window";
        priority = 8;
        runAlways = true;
      };
    };
  };
}
</file>

<file path="modules/nixos/common/default.nix">
{
  inputs,
  outputs,
  lib,
  config,
  userConfig,
  pkgs,
  ...
}: {
  # Nixpkgs configuration
  nixpkgs = {
    overlays = [
      outputs.overlays.stable-packages
    ];

    config = {
      allowUnfree = true;
    };
  };

  # Register flake inputs for nix commands
  nix.registry = lib.mapAttrs (_: flake: {inherit flake;}) (lib.filterAttrs (_: lib.isType "flake") inputs);

  # Add inputs to legacy channels
  nix.nixPath = ["/etc/nix/path"];
  environment.etc =
    lib.mapAttrs' (name: value: {
      name = "nix/path/${name}";
      value.source = value.flake;
    })
    config.nix.registry;

  # Nix settings
  nix.settings = {
    experimental-features = "nix-command flakes";
    auto-optimise-store = true;
  };

  # Boot settings
  boot = {
    kernelPackages = pkgs.linuxKernel.packages.linux_6_14;
    consoleLogLevel = 0;
    initrd.verbose = false;
    kernelParams = ["quiet" "splash" "rd.udev.log_level=3"];
    loader.efi.canTouchEfiVariables = true;
    loader.systemd-boot.enable = true;
    loader.timeout = 0;
    plymouth.enable = true;

    # v4l (virtual camera) module settings
    kernelModules = ["v4l2loopback"];
    extraModulePackages = with config.boot.kernelPackages; [
      v4l2loopback
    ];
    extraModprobeConfig = ''
      options v4l2loopback exclusive_caps=1 card_label="Virtual Camera"
    '';
  };

  # Networking
  networking.networkmanager.enable = true;

  # Disable systemd services that are affecting the boot time
  systemd.services = {
    NetworkManager-wait-online.enable = false;
    plymouth-quit-wait.enable = false;
  };

  # Timezone
  time.timeZone = "Europe/Warsaw";

  # Internationalization
  i18n.defaultLocale = "en_US.UTF-8";
  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_IE.UTF-8";
    LC_IDENTIFICATION = "en_IE.UTF-8";
    LC_MEASUREMENT = "en_IE.UTF-8";
    LC_MONETARY = "en_IE.UTF-8";
    LC_NAME = "en_IE.UTF-8";
    LC_NUMERIC = "en_IE.UTF-8";
    LC_PAPER = "en_IE.UTF-8";
    LC_TELEPHONE = "en_IE.UTF-8";
    LC_TIME = "en_IE.UTF-8";
  };

  # Input settings
  services.libinput.enable = true;

  # xserver settings
  services.xserver = {
    enable = true;
    xkb.layout = "pl";
    xkb.variant = "";
    excludePackages = with pkgs; [xterm];
  };

  # Enable Wayland support in Chromium and Electron based applications
  # Remove decorations for QT apps
  # Set cursor size
  environment.sessionVariables = {
    NIXOS_OZONE_WL = "1";
    XCURSOR_SIZE = "24";
  };

  # PATH configuration
  environment.localBinInPath = true;

  # Disable CUPS printing
  services.printing.enable = false;

  # Enable devmon for device management
  services.devmon.enable = true;

  # Enable PipeWire for sound
  services.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    jack.enable = true;
  };

  # Enable flatpak service
  services.flatpak.enable = true;

  # User configuration
  users.users.${userConfig.name} = {
    description = userConfig.fullName;
    extraGroups = ["networkmanager" "wheel" "docker"];
    isNormalUser = true;
    shell = pkgs.zsh;
  };

  # Set User's avatar
  system.activationScripts.script.text = ''
    mkdir -p /var/lib/AccountsService/{icons,users}
    cp ${userConfig.avatar} /var/lib/AccountsService/icons/${userConfig.name}

    touch /var/lib/AccountsService/users/${userConfig.name}

    if ! grep -q "^Icon=" /var/lib/AccountsService/users/${userConfig.name}; then
      if ! grep -q "^\[User\]" /var/lib/AccountsService/users/${userConfig.name}; then
        echo "[User]" >> /var/lib/AccountsService/users/${userConfig.name}
      fi
      echo "Icon=/var/lib/AccountsService/icons/${userConfig.name}" >> /var/lib/AccountsService/users/${userConfig.name}
    fi
  '';

  # Passwordless sudo
  security.sudo.wheelNeedsPassword = false;

  # System packages
  environment.systemPackages = with pkgs; [
    gcc
    glib
    gnumake
    killall
    mesa
  ];

  # Docker configuration
  virtualisation.docker.enable = true;
  virtualisation.docker.rootless.enable = true;
  virtualisation.docker.rootless.setSocketVariable = true;

  # Zsh configuration
  programs.zsh.enable = true;

  # Fonts configuration
  fonts.packages = with pkgs; [
    nerd-fonts.jetbrains-mono
    nerd-fonts.meslo-lg
    roboto
  ];

  # Additional services
  services.locate.enable = true;

  # OpenSSH daemon
  services.openssh.enable = true;
}
</file>

<file path="hosts/nabokikh-mac/default.nix">
{
  pkgs,
  outputs,
  userConfig,
  ...
}: {
  # Nixpkgs configuration
  nixpkgs = {
    overlays = [
      outputs.overlays.stable-packages
    ];

    config = {
      allowUnfree = true;
    };
  };

  # Nix settings
  nix = {
    settings = {
      experimental-features = "nix-command flakes";
    };
    optimise.automatic = true;
    package = pkgs.nix;
  };

  # User configuration
  users.users.${userConfig.name} = {
    name = "${userConfig.name}";
    home = "/Users/${userConfig.name}";
  };

  # Add ability to use TouchID for sudo
  security.pam.services.sudo_local.touchIdAuth = true;

  # System settings
  system = {
    defaults = {
      CustomUserPreferences = {
        NSGlobalDomain."com.apple.mouse.linear" = true;
      };
      NSGlobalDomain = {
        AppleInterfaceStyle = "Dark";
        ApplePressAndHoldEnabled = false;
        AppleShowAllExtensions = true;
        KeyRepeat = 2;
        NSAutomaticCapitalizationEnabled = false;
        NSAutomaticDashSubstitutionEnabled = false;
        NSAutomaticQuoteSubstitutionEnabled = false;
        NSAutomaticSpellingCorrectionEnabled = false;
        NSAutomaticWindowAnimationsEnabled = false;
        NSDocumentSaveNewDocumentsToCloud = false;
        NSNavPanelExpandedStateForSaveMode = true;
        PMPrintingExpandedStateForPrint = true;
      };
      LaunchServices = {
        LSQuarantine = false;
      };
      trackpad = {
        TrackpadRightClick = true;
        TrackpadThreeFingerDrag = true;
        Clicking = true;
      };
      finder = {
        AppleShowAllFiles = true;
        CreateDesktop = false;
        FXDefaultSearchScope = "SCcf";
        FXEnableExtensionChangeWarning = false;
        FXPreferredViewStyle = "Nlsv";
        QuitMenuItem = true;
        ShowPathbar = true;
        ShowStatusBar = true;
        _FXShowPosixPathInTitle = true;
        _FXSortFoldersFirst = true;
      };
      dock = {
        autohide = true;
        expose-animation-duration = 0.15;
        show-recents = false;
        showhidden = true;
        persistent-apps = [];
        tilesize = 30;
        wvous-bl-corner = 1;
        wvous-br-corner = 1;
        wvous-tl-corner = 1;
        wvous-tr-corner = 1;
      };
      screencapture = {
        location = "/Users/${userConfig.name}/Downloads/temp";
        type = "png";
        disable-shadow = true;
      };
    };
    keyboard = {
      enableKeyMapping = true;
      # Remap §± to ~
      userKeyMapping = [
        {
          HIDKeyboardModifierMappingDst = 30064771125;
          HIDKeyboardModifierMappingSrc = 30064771172;
        }
      ];
    };
    primaryUser = "${userConfig.name}";
  };

  # Zsh configuration
  programs.zsh.enable = true;

  # Fonts configuration
  fonts.packages = with pkgs; [
    nerd-fonts.meslo-lg
  ];

  # Used for backwards compatibility, please read the changelog before changing.
  system.stateVersion = 6;
}
</file>

<file path="modules/home-manager/desktop/hyprland/hyprland.conf">
# Load wallpapers
exec-once = hyprpaper

# Monitor settings
monitor = DP-1, preferred, auto, 1
monitor = eDP-1, preferred, auto, 2
monitor = desc:Dell Inc. DELL U2724DE, highrr, auto, 1

# Execute your favorite apps at launch
exec-once = hypridle
exec-once = gnome-keyring-daemon --start --components=secrets
exec-once = kanshi
exec-once = nm-applet --indicator
exec-once = swaync
exec-once = ulauncher --hide-window
exec-once = waybar
exec-once = wl-paste --watch cliphist store
exec-once = wlsunset -l 52.23 -L 21.01

# Input device setting
input {
    kb_layout = pl,ru
    kb_options = grp:win_space_toggle
    repeat_delay = 250
    repeat_rate = 40

    follow_mouse = 1
    mouse_refocus = false

    touchpad {
        natural_scroll = true
    }

    sensitivity = 0 # -1.0 - 1.0, 0 means no modification.
    accel_profile = flat
}

# General settings
general {
    allow_tearing = false
    border_size = 1
    col.active_border = rgb(b7bdf8)
    gaps_in = 3
    gaps_out = 3
    layout = master
}

# Window decorations settings
decoration {
    rounding = 8
    blur {
        enabled = false
        size = 3
        passes = 1
    }
    shadow {
        enabled = false
        range = 4
        render_power = 3
        color = rgba(1a1a1aee)
    }
}

# Animations settings
animations {
    enabled = false
    bezier = myBezier, 0.05, 0.9, 0.1, 1.05
    animation = windows, 1, 7, myBezier
    animation = windowsOut, 1, 7, default, popin 80%
    animation = border, 1, 10, default
    animation = borderangle, 1, 8, default
    animation = fade, 1, 7, default
    animation = workspaces, 1, 6, default
}

# Layouts settings
dwindle {
    pseudotile = true # master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below
    preserve_split = true # you probably want this
}

master {
    orientation = left
    mfact = 0.50
}

# Mouse gestures settings
gestures {
    workspace_swipe = on
}

# Misc settings
misc {
    force_default_wallpaper = 0 # Set to 0 to disable the anime mascot wallpapers
    disable_hyprland_logo = true
    disable_splash_rendering = true
    vrr = 2
}

device {
  name = epic-mouse-v1
  sensitivity = -0.5
}

# Window rules
# Center specific windows
windowrule = center 1, class:^(.blueman-manager-wrapped)$
windowrule = center 1, class:^(gnome-calculator|org\.gnome\.Calculator)$
windowrule = center 1, class:^(nm-connection-editor)$
windowrule = center 1, class:^(org.pulseaudio.pavucontrol)$
windowrule = center 1, initialTitle:^(_crx_.*)$ # Centered Bitwarden extension

# Float specific windows
windowrule = float, class:^(.blueman-manager-wrapped)$
windowrule = float, class:^(gnome-calculator|org\.gnome\.Calculator)$
windowrule = float, class:^(nm-connection-editor)$
windowrule = float, class:^(org.pulseaudio.pavucontrol)$
windowrule = float, class:^(ulauncher)$
windowrule = float, title:^(MainPicker)$
windowrule = float, initialTitle:^(_crx_.*)$ # Float Bitwarden extension on Brave

# Remove border for specific applications
windowrule = noborder, class:^(ulauncher)$
windowrule = noborder, title:^(.*is sharing (your screen|a window)\.)$ # Screen share indicators

# Set size for specific windows
windowrule = size 50%, class:^(.blueman-manager-wrapped)$
windowrule = size 50%, class:^(nm-connection-editor)$
windowrule = size 50%, class:^(org.pulseaudio.pavucontrol)$

# Keep focus on specific windows when they open
windowrule = stayfocused, class:^(.blueman-manager-wrapped)$
windowrule = stayfocused, class:^(gnome-calculator|org\.gnome\.Calculator)$
windowrule = stayfocused, class:^(org.pulseaudio.pavucontrol)$
windowrule = stayfocused, class:^(swappy)$ # Assuming class is 'swappy'
windowrule = stayfocused, class:^(ulauncher)$

# Assign applications to specific workspaces
windowrule = workspace 1, class:^(brave-browser)$
windowrule = workspace 2, class:^(Alacritty)$
windowrule = workspace 3, class:^(org\.telegram\.desktop)$
windowrule = workspace 4, class:^(com\.obsproject\.Studio)$
windowrule = workspace 4, class:^(steam)$
windowrule = workspace 5 silent, class:^(zoom)$
windowrule = workspace 5, class:^(steam_app_\d+)$ # Matches Steam game classes
windowrule = workspace special, class:^(gnome-pomodoro)$
windowrule = workspace special silent, title:^(.*is sharing (your screen|a window)\.)$ # Screen share indicators to special workspace

# Show applications on all workspaces (pin)
windowrule = pin, title:^(as_toolbar)$

# Bindings
$mainMod = SUPER

bind = $mainMod SHIFT, Return, exec, alacritty
bind = $mainMod SHIFT, B, exec, brave
bind = $mainMod SHIFT, F, exec, nautilus
bind = $mainMod SHIFT, T, exec, telegram-desktop
bind = CTRL ALT, P, exec, gnome-pomodoro --start-stop
bind = $mainMod, Return, layoutmsg, swapwithmaster
bind = $mainMod, R, layoutmsg, orientationcycle
bind = $mainMod, Q, killactive,
bind = CTRL ALT, Q, exit
bind = $mainMod, F, togglefloating
bind = $mainMod, M, fullscreen
bind = $mainMod SHIFT, M, movetoworkspacesilent, special
bind = $mainMod SHIFT, P, togglespecialworkspace
bind = $mainMod SHIFT, C, exec, hyprpicker -a

# Move focus with mainMod + arrow keys
bind = $mainMod, l, movefocus, l
bind = $mainMod, h, movefocus, r
bind = $mainMod, k, movefocus, u
bind = $mainMod, j, movefocus, d

# Resize windows
bind = $mainMod SHIFT, left, resizeactive, -50 0
bind = $mainMod SHIFT, right, resizeactive, 50 0
bind = $mainMod SHIFT, up, resizeactive, 0 -50
bind = $mainMod SHIFT, down, resizeactive, 0 50

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10

# Scroll through existing workspaces with mainMod + scroll
bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow

# Application menu
bind = $mainMod, A, exec, wofi --show drun --allow-images

# Center focused window
bind = CTRL ALT, C, centerwindow

# Clipboard
bind = ALT SHIFT, V, exec, cliphist list | wofi --show dmenu | cliphist decode | wl-copy

# Ulauncher
bind = CTRL, Space, exec, ulauncher-toggle

# Screenshot area
bind = $mainMod SHIFT, S, exec, $HOME/.local/bin/hyprshot --freeze --silent --raw --mode region | swappy -f -

# Screenshot entire screen
bind = $mainMod CTRL, S, exec, $HOME/.local/bin/hyprshot --freeze --silent --raw --mode output | swappy -f -

# Screen recording
bind = $mainMod SHIFT, R, exec, $HOME/.local/bin/screen-recorder

# OCR
bind = ALT SHIFT, 2, exec, $HOME/.local/bin/ocr

# Lock screen
bind = CTRL ALT, L, exec, hyprlock

# Adjust brightness
bind = , XF86MonBrightnessUp, exec, brightnessctl set +10%
bind = , XF86MonBrightnessDown, exec, brightnessctl set 10%-

# Open notifications
bind = $mainMod, V, exec, swaync-client -t -sw

# Adjust  volume
bind = , XF86AudioRaiseVolume, exec, pamixer --increase 10
bind = , XF86AudioLowerVolume, exec, pamixer --decrease 10
bind = , XF86AudioMute, exec, pamixer --toggle-mute
bind = , XF86AudioMicMute, exec, pamixer --default-source --toggle-mute

# Adjust mic sensitivity
bind = SHIFT, XF86AudioRaiseVolume, exec, pamixer --increase 10 --default-source
bind = SHIFT, XF86AudioLowerVolume, exec, pamixer --decrease 10 --default-source

# Adjust keyboard backlight
bind = SHIFT, XF86MonBrightnessUp, exec, brightnessctl -d tpacpi::kbd_backlight set +33%
bind = SHIFT, XF86MonBrightnessDown, exec, brightnessctl -d tpacpi::kbd_backlight set 33%-
</file>

<file path="modules/home-manager/common/default.nix">
{
  outputs,
  userConfig,
  pkgs,
  ...
}: {
  imports = [
    ../misc/qt
    ../programs/aerospace
    ../programs/alacritty
    ../programs/atuin
    ../programs/bat
    ../programs/brave
    ../programs/btop
    ../programs/fastfetch
    ../programs/fzf
    ../programs/git
    ../programs/go
    ../programs/gpg
    ../programs/k9s
    ../programs/krew
    ../programs/lazygit
    ../programs/neovim
    ../programs/obs-studio
    ../programs/saml2aws
    ../programs/starship
    ../programs/telegram
    ../programs/tmux
    ../programs/ulauncher
    ../programs/zsh
    ../scripts
    ../services/flatpak
  ];

  # Nixpkgs configuration
  nixpkgs = {
    overlays = [
      outputs.overlays.stable-packages
    ];

    config = {
      allowUnfree = true;
    };
  };

  # Nicely reload system units when changing configs
  systemd.user.startServices = "sd-switch";

  # Home-Manager configuration for the user's home environment
  home = {
    username = "${userConfig.name}";
    homeDirectory =
      if pkgs.stdenv.isDarwin
      then "/Users/${userConfig.name}"
      else "/home/${userConfig.name}";
  };

  # Ensure common packages are installed
  home.packages = with pkgs;
    [
      anki-bin
      awscli2
      dig
      du-dust
      eza
      fd
      jq
      kubectl
      lazydocker
      nh
      openconnect
      pipenv
      python3
      ripgrep
      terraform
    ]
    ++ lib.optionals stdenv.isDarwin [
      colima
      docker
      hidden-bar
      raycast
    ]
    ++ lib.optionals (!stdenv.isDarwin) [
      pavucontrol
      tesseract
      unzip
      wl-clipboard
    ];

  # Catpuccin flavor and accent
  catppuccin = {
    flavor = "macchiato";
    accent = "lavender";
  };
}
</file>

<file path="flake.lock">
{
  "nodes": {
    "catppuccin": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      },
      "locked": {
        "lastModified": 1748080874,
        "narHash": "sha256-sUebEzAkrY8Aq5G0GHFyRddmRNGP/a2iTtV7ISNvi/c=",
        "owner": "catppuccin",
        "repo": "nix",
        "rev": "0ba11b12be81f0849a89ed17ab635164ea8f0112",
        "type": "github"
      },
      "original": {
        "owner": "catppuccin",
        "repo": "nix",
        "type": "github"
      }
    },
    "darwin": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1748352827,
        "narHash": "sha256-sNUUP6qxGkK9hXgJ+p362dtWLgnIWwOCmiq72LAWtYo=",
        "owner": "LnL7",
        "repo": "nix-darwin",
        "rev": "44a7d0e687a87b73facfe94fba78d323a6686a90",
        "type": "github"
      },
      "original": {
        "owner": "LnL7",
        "repo": "nix-darwin",
        "type": "github"
      }
    },
    "hardware": {
      "locked": {
        "lastModified": 1747900541,
        "narHash": "sha256-dn64Pg9xLETjblwZs9Euu/SsjW80pd6lr5qSiyLY1pg=",
        "owner": "nixos",
        "repo": "nixos-hardware",
        "rev": "11f2d9ea49c3e964315215d6baa73a8d42672f06",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "repo": "nixos-hardware",
        "type": "github"
      }
    },
    "home-manager": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1748570847,
        "narHash": "sha256-XU1a6wFctd+s3ZvBIFB6s4GhPJ+Oc6pkeOrEsbA2fMo=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "4e9efaa68b0be7e19127dad4f0506a9b89e28ef4",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "nix-flatpak": {
      "locked": {
        "lastModified": 1739444422,
        "narHash": "sha256-iAVVHi7X3kWORftY+LVbRiStRnQEob2TULWyjMS6dWg=",
        "owner": "gmodena",
        "repo": "nix-flatpak",
        "rev": "5e54c3ca05a7c7d968ae1ddeabe01d2a9bc1e177",
        "type": "github"
      },
      "original": {
        "owner": "gmodena",
        "ref": "v0.6.0",
        "repo": "nix-flatpak",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1744463964,
        "narHash": "sha256-LWqduOgLHCFxiTNYi3Uj5Lgz0SR+Xhw3kr/3Xd0GPTM=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "2631b0b7abcea6e640ce31cd78ea58910d31e650",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-stable": {
      "locked": {
        "lastModified": 1748302896,
        "narHash": "sha256-ixMT0a8mM091vSswlTORZj93WQAJsRNmEvqLL+qwTFM=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "7848cd8c982f7740edf76ddb3b43d234cb80fc4d",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-25.05",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_2": {
      "locked": {
        "lastModified": 1748370509,
        "narHash": "sha256-QlL8slIgc16W5UaI3w7xHQEP+Qmv/6vSNTpoZrrSlbk=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "4faa5f5321320e49a78ae7848582f684d64783e9",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "plasma-manager": {
      "inputs": {
        "home-manager": [
          "home-manager"
        ],
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1748196248,
        "narHash": "sha256-1iHjsH6/5UOerJEoZKE+Gx1BgAoge/YcnUsOA4wQ/BU=",
        "owner": "nix-community",
        "repo": "plasma-manager",
        "rev": "b7697abe89967839b273a863a3805345ea54ab56",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "plasma-manager",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "catppuccin": "catppuccin",
        "darwin": "darwin",
        "hardware": "hardware",
        "home-manager": "home-manager",
        "nix-flatpak": "nix-flatpak",
        "nixpkgs": "nixpkgs_2",
        "nixpkgs-stable": "nixpkgs-stable",
        "plasma-manager": "plasma-manager"
      }
    }
  },
  "root": "root",
  "version": 7
}
</file>

</files>
